/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[5,15,25,39,44,45,46,54,55,80],$Va=[2,14],$Vb=[1,30],$Vc=[1,28],$Vd=[1,29],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[5,15,25,32,35,36,37,39,44,45,46,50,53,54,55,80],$Vl=[2,13],$Vm=[5,15,20,25,32,35,36,37,39,44,45,46,50,53,54,55,80],$Vn=[1,56],$Vo=[1,50],$Vp=[1,58],$Vq=[1,48],$Vr=[1,49],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,57],$Vy=[1,62],$Vz=[1,68],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[2,16],$VE=[1,107],$VF=[1,108],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[1,104],$VT=[1,105],$VU=[1,106],$VV=[5,15,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,74,75,80,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103],$VW=[5,15,17,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,70,71,72,73,74,75,80,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103],$VX=[2,77],$VY=[5,15,19,20,23,25,32,35,36,37,39,44,45,46,50,53,54,55,67,80],$VZ=[1,123],$V_=[1,131],$V$=[1,127],$V01=[1,128],$V11=[1,129],$V21=[1,130],$V31=[15,25,32,35,36,37,39,44,45,46,50,53,54,55,80],$V41=[19,23],$V51=[23,67],$V61=[20,23,32],$V71=[20,23],$V81=[19,20,23,30,56],$V91=[2,100],$Va1=[1,182],$Vb1=[5,15,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,80,88,89,94,95,96,97,98,99,100,101,103],$Vc1=[5,15,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,80,88,89,90,91,93,94,95,96,97,98,99,100,101,103],$Vd1=[5,15,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,80,94,95,96,97,98,99,100,101,103],$Ve1=[1,224],$Vf1=[15,17,66,89,102,104,105,106,107,108,109],$Vg1=[19,20,23,30,56,66],$Vh1=[1,243],$Vi1=[2,43],$Vj1=[1,254],$Vk1=[32,50,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"funciones":9,"IF":10,"WHILE":11,"DOWHILE":12,"SWITCH":13,"FOR":14,"id":15,"PL":16,"bracketOpen":17,"paramFunc":18,"bracketClose":19,"semicolon":20,"varLast":21,"paramFuncList":22,"comma":23,"E":24,"function":25,"funcParam":26,"funcDec":27,"dosPuntos":28,"types":29,"curlyBraceOpen":30,"STMT":31,"curlyBraceClose":32,"funcParamList":33,"InstruccionI":34,"Break":35,"Continue":36,"return":37,"OP":38,"if":39,"exp":40,"IFLAST":41,"else":42,"IFCOND":43,"while":44,"do":45,"switch":46,"FIRSTCASE":47,"LASTCASE":48,"CASE":49,"case":50,"DEFCASE":51,"ENDCASE":52,"default":53,"for":54,"let":55,"igual":56,"forOP":57,"in":58,"of":59,"defVarLast":60,"defVarLastP":61,"defLast":62,"defType":63,"asignLast":64,"asignLastF":65,"sqBracketOpen":66,"sqBracketClose":67,"auxP":68,"point":69,"masIgual":70,"menosIgual":71,"porIgual":72,"divisionIgual":73,"increment":74,"decrement":75,"parsObj":76,"objType":77,"opkv":78,"keyvalueT":79,"const":80,"number":81,"typesList":82,"boolean":83,"string":84,"void":85,"typesL":86,"objetoParam":87,"mas":88,"menos":89,"por":90,"division":91,"potencia":92,"modulo":93,"mayorque":94,"menorque":95,"mayorigualque":96,"menorigualque":97,"igualdad":98,"diferencia":99,"and":100,"or":101,"not":102,"question":103,"NUMBER":104,"STRING":105,"true":106,"false":107,"null":108,"new":109,"arrParam":110,"listArrParam":111,"objetoParamList":112,"keyvalue":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"id",17:"bracketOpen",19:"bracketClose",20:"semicolon",23:"comma",25:"function",28:"dosPuntos",30:"curlyBraceOpen",32:"curlyBraceClose",35:"Break",36:"Continue",37:"return",39:"if",42:"else",44:"while",45:"do",46:"switch",50:"case",53:"default",54:"for",55:"let",56:"igual",58:"in",59:"of",66:"sqBracketOpen",67:"sqBracketClose",69:"point",70:"masIgual",71:"menosIgual",72:"porIgual",73:"divisionIgual",74:"increment",75:"decrement",80:"const",81:"number",83:"boolean",84:"string",85:"void",88:"mas",89:"menos",90:"por",91:"division",92:"potencia",93:"modulo",94:"mayorque",95:"menorque",96:"mayorigualque",97:"menorigualque",98:"igualdad",99:"diferencia",100:"and",101:"or",102:"not",103:"question",104:"NUMBER",105:"STRING",106:"true",107:"false",108:"null",109:"new"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[16,1],[16,0],[18,1],[18,0],[22,3],[22,1],[9,6],[27,5],[27,3],[26,1],[26,0],[33,5],[33,3],[31,2],[31,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,2],[34,2],[38,2],[38,1],[10,8],[41,2],[41,0],[43,8],[43,3],[11,7],[12,9],[13,8],[47,1],[47,0],[49,5],[49,4],[48,2],[51,3],[52,1],[52,0],[14,16],[14,13],[14,11],[14,10],[57,1],[57,1],[60,2],[60,0],[61,4],[61,2],[8,5],[8,3],[8,2],[62,4],[62,2],[64,2],[64,1],[21,4],[21,3],[68,1],[68,0],[65,2],[65,2],[65,2],[65,2],[65,2],[65,1],[65,1],[76,1],[76,0],[77,3],[77,1],[78,1],[78,1],[79,3],[63,1],[63,1],[29,2],[29,2],[29,2],[29,2],[29,2],[82,1],[82,0],[86,3],[86,2],[24,1],[24,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,3],[40,5],[40,2],[40,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,2],[40,5],[40,1],[40,5],[40,3],[110,1],[110,0],[111,3],[111,1],[87,1],[87,0],[112,3],[112,1],[113,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {ast:$$[$0-1],tabla:tablaErrores}; 
break;
case 2: case 26:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 18:
 this.$ = [$$[$0]]; 
break;
case 4: case 15: case 42: case 103:
 this.$ = $$[$0]; 
break;
case 5: case 6:
 this.$=$$[$0]; 
break;
case 7:
 this.$ =$$[$0]; 
break;
case 8:
this.$ =$$[$0];
break;
case 9: case 10: case 11: case 13: case 22: case 28: case 29: case 31: case 32: case 33: case 34: case 35: case 49: case 55: case 76: case 92: case 93: case 99:
this.$=$$[$0];
break;
case 12:

					this.$ = new callFunction($$[$0-5],$$[$0-4],$$[$0-2]);
				
break;
case 14: case 40: case 56: case 64: case 77:
this.$=null;
break;
case 17:

					$$[$0-2].push($$[$0]);
					this.$ = $$[$0-2];
				
break;
case 19:

			   this.$ = new Function($$[$0-4],$$[$0-2],$$[$0]);
		   
break;
case 20:

			this.$ = {type:$$[$0-3],stmt:$$[$0-1]}
		
break;
case 21:

			this.$ = {type:null,stmt:$$[$0-1]}
		
break;
case 23: case 43: case 50: case 136:
this.$ = null;
break;
case 24:
$$[$0-4].push({id:$$[$0-2],types:$$[$0]}); this.$=$$[$0-4];
break;
case 25:
this.$ = [{id:$$[$0-2],types:$$[$0]}];
break;
case 27:
this.$=[$$[$0]];
break;
case 36:
this.$=new Break();
break;
case 37:
this.$=new Continue();
break;
case 38:
 this.$=new Return($$[$0]); 
break;
case 39:
this.$=$$[$0-1];
break;
case 41:

		this.$ = new If($$[$0-5],$$[$0-2],$$[$0]);
	
break;
case 44:

		   this.$ = new If($$[$0-5],$$[$0-2],$$[$0]);
	   
break;
case 45:

		   this.$ = new If(null,$$[$0-1],null);
	   
break;
case 46:

	this.$ = new While(0,0,$$[$0-4],$$[$0-1]);

break;
case 47:

	this.$ = new DoWhile(0,0,$$[$0-2],$$[$0-6]);

break;
case 48:

			this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1]);
		
break;
case 51:

			$$[$0-4].push({exp:$$[$0-2],stmt:$$[$0]});
			this.$ = $$[$0-4];
	  
break;
case 52:

			this.$ = [{exp:$$[$0-2],stmt:$$[$0]}]
	 
break;
case 53:

	this.$ = $$[$0-1];

break;
case 54:

	this.$ = $$[$0];

break;
case 57:

		this.$ = new For($$[$0-13],$$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 58:

		this.$ = new For2($$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 59:

		this.$ = new ForThree($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 60:

		this.$ = new ForIO($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-1]);
	
break;
case 61:
this.$=1;
break;
case 62:
this.$=2;
break;
case 67:

				this.$ = new Variables($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
			
break;
case 68:

				this.$ = new VariableChange($$[$0-2],$$[$0-1]);
		  	
break;
case 69:

				this.$ = new VariableChange($$[$0-1],$$[$0]);
		  	
break;
case 70:

			this.$ = new defLast($$[$0-2],$$[$0]);
		
break;
case 71:

			this.$ = new defLast($$[$0],null);
		
break;
case 72:
 this.$={varLast:$$[$0-1],asignLastF:$$[$0],temp:true}; 
break;
case 73: case 135:
this.$ = $$[$0];
break;
case 74:

			this.$ = new List(true,$$[$0-2],$$[$0]);
		
break;
case 75:

			this.$ = new List(false,$$[$0-1],$$[$0]);
		
break;
case 78:

				this.$ = {tipo:'=',value:$$[$0]}
			
break;
case 79:

				this.$ = {tipo:'+',value:$$[$0]}
			
break;
case 80:

				this.$ = {tipo:'-',value:$$[$0]}
			
break;
case 81:

				this.$ = {tipo:'*',value:$$[$0]}
			
break;
case 82:

				this.$ = {tipo:'/',value:$$[$0]}
			
break;
case 83:

				this.$ = {tipo:'++',value:null}
			
break;
case 84:

				this.$ = {tipo:'--',value:null}
			
break;
case 94: case 95: case 96: case 97: case 98:

			this.$ = {type:$$[$0-1],list:$$[$0]}
		
break;
case 100:
this.$ = 0;
break;
case 101:

			this.$ = $$[$0-2] + 1;
		
break;
case 102:

			this.$ = 1;
		
break;
case 105:

		this.$ = new Operation($$[$0-2],$$[$0],'+',0,0);
	
break;
case 106:

		this.$ = new Operation($$[$0-2],$$[$0],'-',0,0);
	
break;
case 107:

		this.$ = new Operation($$[$0-2],$$[$0],'*',0,0);
	
break;
case 108:

		this.$ = new Operation($$[$0-2],$$[$0],'/',0,0);
	
break;
case 109:

		this.$ = new Operation($$[$0],null,'--',0,0);
	
break;
case 110:

		this.$ = new Operation($$[$0-2],$$[$0],'**',0,0);
	
break;
case 111:

		this.$ = new Operation($$[$0-2],$$[$0],'%',0,0);
	
break;
case 112:

		this.$ = new Relational($$[$0-2],$$[$0],'>',0,0);
	
break;
case 113:

		this.$ = new Relational($$[$0-2],$$[$0],'<',0,0);
	
break;
case 114:

		this.$ = new Relational($$[$0-2],$$[$0],'>=',0,0);
	
break;
case 115:

		this.$ = new Relational($$[$0-2],$$[$0],'<=',0,0);
	
break;
case 116:

		this.$ = new Relational($$[$0-2],$$[$0],'==',0,0);
	
break;
case 117:

		this.$ = new Relational($$[$0-2],$$[$0],'!=',0,0);
	
break;
case 118:

		this.$ = new Logical($$[$0-2],$$[$0],'&&',0,0);
	
break;
case 119:

		this.$ = new Logical($$[$0-2],$$[$0],'||',0,0);
	
break;
case 120:

		this.$ = new Logical($$[$0],null,'!',0,0);
	
break;
case 121:

		this.$ =$$[$0-1];
	
break;
case 122:

		this.$ = new Ternary($$[$0-4],$$[$0-2],$$[$0]);	
	
break;
case 123:

		this.$ = new IncDecOp($$[$0-1],'+');
	
break;
case 124:

		this.$ = new IncDecOp($$[$0-1],'-');
	
break;
case 125:

		this.$ = new tsObject(0,0,$$[$0],'number');
	
break;
case 126:

		this.$ = new tsObject(0,0,$$[$0],'string');
	
break;
case 127:

		this.$ = new tsObject(0,0,1,'boolean');
	
break;
case 128:

		this.$ = new tsObject(0,0,0,'boolean');
	
break;
case 129:

		this.$ = new tsObject(0,0,-100,'null');
	
break;
case 130:

		this.$ = new IdAccess($$[$0-1],$$[$0]);
	
break;
case 131:

		this.$ = new Arrayl($$[$0-3],$$[$0-1]);
	
break;
case 132:

		this.$ = new Id(0,0,$$[$0]);
	
break;
case 133:

		this.$ = new callFunction($$[$0-4],$$[$0-3],$$[$0-1]);
	
break;
case 134:

		this.$ = new ArrList($$[$0-1]);
	
break;
case 137:

				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 138:
this.$ = [$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,25:$V1,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{1:[3]},{5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,25:$V1,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{16:24,17:$Va,21:26,56:$Vb,64:25,65:27,66:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj},{15:[1,37]},{15:[1,38]},{17:[1,39]},{17:[1,40]},{30:[1,41]},{17:[1,42]},{17:[1,43]},{15:[2,92]},{15:[2,93]},{1:[2,1]},o($V9,[2,2]),{17:[1,44]},o($Vk,[2,69],{20:[1,45]}),{17:$Vl,56:$Vb,65:46,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj},o($Vm,[2,73]),{15:$Vn,17:$Vo,40:47,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:[1,59]},{15:$Vn,17:$Vo,24:60,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,24:63,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,24:64,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,24:65,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,24:66,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($Vm,[2,83]),o($Vm,[2,84]),{28:$Vz,62:67},{17:[1,69]},{15:$Vn,17:$Vo,40:70,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:71,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:72,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{15:$Vn,17:$Vo,40:85,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:87,55:[1,86],66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,18:88,19:$VD,22:89,24:90,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($Vk,[2,68]),o($Vm,[2,72]),{67:[1,91],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{15:$Vn,17:$Vo,40:109,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:110,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:111,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($VV,[2,125]),o($VV,[2,126]),o($VV,[2,127]),o($VV,[2,128]),o($VV,[2,129]),o($VV,[2,132],{21:112,16:113,17:$Va,66:$Vc,69:$Vd}),{15:[1,114]},{15:$Vn,17:$Vo,24:117,30:$Vy,40:61,66:$Vp,67:[2,136],89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:115,111:116},o($VW,$VX,{68:118,21:119,66:$Vc,69:$Vd}),o($Vm,[2,78]),o($VY,[2,103],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU}),{15:$VZ,32:[2,140],87:120,112:121,113:122},o($Vm,[2,79]),o($Vm,[2,80]),o($Vm,[2,81]),o($Vm,[2,82]),{20:[2,64],23:[1,125],60:124},{15:$V_,29:126,81:$V$,83:$V01,84:$V11,85:$V21},{15:[1,134],19:[2,23],26:132,33:133},{19:[1,135],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{19:[1,136],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,137],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($V31,[2,27]),o($V31,[2,28]),o($V31,[2,29]),o($V31,[2,30]),o($V31,[2,31]),o($V31,[2,32]),o($V31,[2,33]),o($V31,[2,34]),o($V31,[2,35]),{20:[1,139]},{20:[1,140]},{15:$Vn,17:$Vo,20:[1,143],24:142,30:$Vy,38:141,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{19:[1,144],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{15:[1,145]},{20:[1,147],56:[1,146],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{19:[1,148]},{19:[2,15],23:[1,149]},o($V41,[2,18]),o($VW,$VX,{21:119,68:150,66:$Vc,69:$Vd}),{15:$Vn,17:$Vo,40:151,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:152,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:153,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:154,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:155,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:156,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:157,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:158,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:159,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:160,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:161,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:162,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:163,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:164,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:165,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($VV,[2,123]),o($VV,[2,124]),o($VV,[2,109]),o($VV,[2,120]),{19:[1,166],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},o($VV,[2,130],{17:$Vl}),{17:[1,167]},{17:[1,168]},{67:[1,169]},{23:[1,170],67:[2,135]},o($V51,[2,138]),o($VW,[2,75]),o($VW,[2,76]),{32:[1,171]},{20:[1,174],23:[1,173],32:[2,139],78:172},o($V61,[2,142]),{28:[1,175]},{20:[1,176]},{15:[1,178],61:177},o($V71,[2,71],{56:[1,179]}),o($V81,$V91,{82:180,86:181,66:$Va1}),o($V81,$V91,{86:181,82:183,66:$Va1}),o($V81,$V91,{86:181,82:184,66:$Va1}),o($V81,$V91,{86:181,82:185,66:$Va1}),o($V81,$V91,{86:181,82:186,66:$Va1}),{19:[1,187]},{19:[2,22],23:[1,188]},{28:[1,189]},{30:[1,190]},{30:[1,191]},{44:[1,192]},o($V31,[2,26]),o($V31,[2,36]),o($V31,[2,37]),o($V31,[2,38]),{20:[1,193]},o($V31,[2,40]),{30:[1,194]},{28:[1,195],57:196,58:[1,197],59:[1,198]},{15:$Vn,17:$Vo,40:199,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:200,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{20:[1,201]},{15:$Vn,17:$Vo,24:202,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($VW,[2,74]),o($Vb1,[2,105],{74:$VE,75:$VF,90:$VI,91:$VJ,92:$VK,93:$VL}),o($Vb1,[2,106],{74:$VE,75:$VF,90:$VI,91:$VJ,92:$VK,93:$VL}),o($Vc1,[2,107],{74:$VE,75:$VF,92:$VK}),o($Vc1,[2,108],{74:$VE,75:$VF,92:$VK}),o($VV,[2,110]),o($Vc1,[2,111],{74:$VE,75:$VF,92:$VK}),o($Vd1,[2,112],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($Vd1,[2,113],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($Vd1,[2,114],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($Vd1,[2,115],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($Vd1,[2,116],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($Vd1,[2,117],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o([5,15,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,80,100,101,103],[2,118],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o([5,15,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,80,101,103],[2,119],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS}),{28:[1,203],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},o($VV,[2,121]),{15:$Vn,17:$Vo,18:204,19:$VD,22:89,24:90,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:205,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($VV,[2,134]),{15:$Vn,17:$Vo,24:206,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($VY,[2,104]),{15:$VZ,113:207},{15:[2,89]},{15:[2,90]},{15:$Vn,17:$Vo,24:208,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($Vk,[2,67]),{20:[2,63],23:[1,209]},{28:$Vz,62:210},{15:$Vn,17:$Vo,24:211,30:$Vy,40:61,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($V81,[2,94]),o($V81,[2,99],{66:[1,212]}),{67:[1,213]},o($V81,[2,95]),o($V81,[2,96]),o($V81,[2,97]),o($V81,[2,98]),{27:214,28:[1,215],30:[1,216]},{15:[1,217]},{15:$V_,29:218,81:$V$,83:$V01,84:$V11,85:$V21},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:219,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:220,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{17:[1,221]},o($V31,[2,39]),{47:222,49:223,50:$Ve1,53:[2,50]},{15:$V_,29:225,81:$V$,83:$V01,84:$V11,85:$V21},{15:$Vn,17:$Vo,40:226,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o($Vf1,[2,61]),o($Vf1,[2,62]),{20:[1,227],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{20:[1,228],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},o($Vk,[2,12]),o($V41,[2,17]),{15:$Vn,17:$Vo,40:229,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{19:[1,230]},{19:[1,231],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},o($V51,[2,137]),o($V61,[2,141]),o($V61,[2,143]),{15:[1,232]},o($V71,[2,66]),o($V71,[2,70]),{67:[1,233]},o($Vg1,[2,102]),o($Vk,[2,19]),{15:$V_,29:234,81:$V$,83:$V01,84:$V11,85:$V21},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:235,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{28:[1,236]},o($V41,[2,25]),{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,237],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,238],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{15:$Vn,17:$Vo,40:239,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{48:240,51:241,53:[1,242]},{50:$Vh1,53:[2,49]},{15:$Vn,17:$Vo,40:244,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{56:[1,245]},{19:[1,246],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{15:$Vn,17:$Vo,40:247,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{15:$Vn,17:$Vo,40:248,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},o([5,15,19,20,23,25,28,32,35,36,37,39,44,45,46,50,53,54,55,56,67,80],[2,122],{74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU}),o($VV,[2,133]),o($VV,[2,131]),{28:$Vz,62:249},o($Vg1,[2,101]),{30:[1,250]},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,251],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{15:$V_,29:252,81:$V$,83:$V01,84:$V11,85:$V21},o($Vk,$Vi1,{41:253,42:$Vj1}),o($Vk,[2,46]),{19:[1,255],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{32:[1,256]},{32:[2,56],49:258,50:$Ve1,52:257},{28:[1,259]},{15:$Vn,17:$Vo,40:260,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{28:[1,261],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{15:$Vn,17:$Vo,40:262,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{30:[1,263]},{20:[1,264],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{19:[1,265],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},o($V71,[2,65]),{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:266,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk,[2,21]),o($V41,[2,24]),o($Vk,[2,41]),{30:[1,269],39:[1,268],43:267},{20:[1,270]},o($Vk,[2,48]),{32:[2,53]},{32:[2,55],50:$Vh1},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:271,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{28:[1,272],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:273,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{20:[1,274],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:275,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{15:$Vn,17:$Vo,40:276,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{30:[1,277]},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,278],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk,[2,42]),{17:[1,279]},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:280,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk,[2,47]),o([32,50],[2,54],{63:13,7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,34:138,15:$V0,25:$V1,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,80:$V8}),{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:281,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk1,[2,52],{63:13,7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,34:138,15:$V0,25:$V1,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,80:$V8}),{15:$Vn,17:$Vo,40:282,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,283],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{19:[1,284],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:285,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk,[2,20]),{15:$Vn,17:$Vo,40:286,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,287],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk1,[2,51],{63:13,7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,34:138,15:$V0,25:$V1,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,80:$V8}),{20:[1,288],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},o($Vk,[2,60]),{30:[1,289]},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,290],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{19:[1,291],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},o($Vk,[2,45]),{15:$Vn,17:$Vo,40:292,66:$Vp,89:$Vq,102:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:293,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk,[2,59]),{30:[1,294]},{19:[1,295],74:$VE,75:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,103:$VU},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,296],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:297,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{30:[1,298]},o($Vk,[2,58]),{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,299],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,31:300,34:73,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk,$Vi1,{41:301,42:$Vj1}),{7:74,8:75,9:76,10:77,11:78,12:79,13:80,14:81,15:$V0,25:$V1,32:[1,302],34:138,35:$VA,36:$VB,37:$VC,39:$V2,44:$V3,45:$V4,46:$V5,54:$V6,55:$V7,63:13,80:$V8},o($Vk,[2,44]),o($Vk,[2,57])],
defaultActions: {20:[2,92],21:[2,93],22:[2,1],173:[2,89],174:[2,90],257:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	let tablaErrores = [];	

	const Logical  = require('./CodigoIntermedio/Logical.js');
	const Operation = require('./CodigoIntermedio/Operation.js');
	const Relational = require('./CodigoIntermedio/Relational.js');
	const tsObject =  require('./CodigoIntermedio/tsObject.js')
	const Print =     require('./CodigoIntermedio/Print.js')
	const Variables = require('./CodigoIntermedio/Variable.js')
	const defLast = require('./CodigoIntermedio/defLast.js')
	const Id = require('./CodigoIntermedio/Id.js')
	const If = require('./CodigoIntermedio/If.js')
	const VariableChange = require('./CodigoIntermedio/VariableChange.js');
	const While = require('./CodigoIntermedio/While.js');
	const DoWhile = require('./CodigoIntermedio/DoWhile.js');
	const Switch = require('./CodigoIntermedio/Switch.js');
	const For = require('./CodigoIntermedio/For.js')
	const IncDecOp = require('./CodigoIntermedio/IncDecOp.js');
	const For2 = require('./CodigoIntermedio/For2.js');
	const ForThree = require('./CodigoIntermedio/ForThree.js');
	const Function = require('./CodigoIntermedio/Function.js');
	const callFunction = require('./CodigoIntermedio/callFunction.js');
	const Return = require('./CodigoIntermedio/Return.js');
	const Break = require('./CodigoIntermedio/Break.js');
	const Continue = require('./CodigoIntermedio/Continue.js');
	const Ternary = require('./CodigoIntermedio/Ternary.js');
	const Arrayl = require('./CodigoIntermedio/Arrayl.js');
	const ArrList = require('./CodigoIntermedio/ArrList.js');
	const IdAccess = require('./CodigoIntermedio/IdAccess.js');
	const List = require('./CodigoIntermedio/List.js');
	const ForIO = require('./CodigoIntermedio/ForIO.js');
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Comentario Linea
break;
case 1://Comentaio Multilinea
break;
case 2:return 36;
break;
case 3:return 35;
break;
case 4:return 108;
break;
case 5:return 'Type';
break;
case 6:return 80;
break;
case 7:return 55;
break;
case 8:return 80;
break;
case 9:return 25;
break;
case 10:return 39;
break;
case 11:return 42;
break;
case 12:return 44;
break;
case 13:return 45;
break;
case 14:return 46;
break;
case 15:return 50;
break;
case 16:return 53;
break;
case 17:return 54;
break;
case 18:return 58;
break;
case 19:return 59;
break;
case 20:return 81;
break;
case 21:return 83;
break;
case 22:return 84;
break;
case 23:return 85;
break;
case 24:return 106;
break;
case 25:return 107;
break;
case 26:return 'undefined';
break;
case 27:return 37;
break;
case 28:return 109;
break;
case 29:return 70;
break;
case 30:return 71;
break;
case 31:return 72;
break;
case 32:return 73;
break;
case 33:return 30;
break;
case 34:return 32;
break;
case 35:return 17;
break;
case 36:return 19;
break;
case 37:return 23;
break;
case 38:return 20;
break;
case 39:return 28;
break;
case 40:return 69;
break;
case 41:return 74;
break;
case 42:return 75;
break;
case 43:return 88;
break;
case 44:return 89;
break;
case 45:return 92;
break;
case 46:return 90;
break;
case 47:return 91;
break;
case 48:return 93;
break;
case 49:return 96;
break;
case 50:return 97;
break;
case 51:return 94;
break;
case 52:return 95;
break;
case 53:return 98;
break;
case 54:return 56;
break;
case 55:return 99;
break;
case 56:return 100;
break;
case 57:return 101;
break;
case 58:return 102;
break;
case 59:return 103;
break;
case 60:return 66;
break;
case 61:return 67;
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:
break;
case 66:return 104;
break;
case 67:return 105;
break;
case 68:return 15;
break;
case 69:return 5;
break;
case 70: 
							console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
							tablaErrores.push({line:yy_.yylloc.first_line, column:yy_.yylloc.first_column, type:'Lexico',msg:'El caracter: ' + yy_.yytext + " no se esperaba"})
	
						
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:\s+)/,/^(?:\t+)/,/^(?:\r+)/,/^(?:\n+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*'|`[^\`]*`)/,/^(?:([a-zA-Z$_])[a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}