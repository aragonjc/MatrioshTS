/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,13],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[5,9,10,30,42,47,48,49,57,58,82],$Vb=[1,32],$Vc=[2,15],$Vd=[1,30],$Ve=[1,31],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[5,9,10,14,30,38,39,40,42,47,48,49,53,56,57,58,82],$Vm=[2,14],$Vn=[5,9,10,14,15,30,38,39,40,42,47,48,49,53,56,57,58,82],$Vo=[1,60],$Vp=[1,53],$Vq=[1,61],$Vr=[1,51],$Vs=[1,52],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,65],$VA=[1,71],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[2,17],$VF=[1,111],$VG=[1,112],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,106],$VS=[1,107],$VT=[1,108],$VU=[1,109],$VV=[1,110],$VW=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,77,78,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105],$VX=[2,144],$VY=[5,9,10,11,14,15,23,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,73,74,75,76,77,78,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105],$VZ=[2,81],$V_=[5,9,10,14,15,25,28,30,38,39,40,42,47,48,49,53,56,57,58,70,82],$V$=[1,126],$V01=[1,134],$V11=[1,130],$V21=[1,131],$V31=[1,132],$V41=[1,133],$V51=[10,14,30,38,39,40,42,47,48,49,53,56,57,58,82],$V61=[1,152],$V71=[1,153],$V81=[1,157],$V91=[25,28],$Va1=[28,70],$Vb1=[1,183],$Vc1=[1,182],$Vd1=[14,15,28],$Ve1=[15,28],$Vf1=[11,12,14,15,25,28],$Vg1=[2,104],$Vh1=[1,191],$Vi1=[10,23,69,91,104,106,107,108,109,110,111],$Vj1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,90,91,96,97,98,99,100,101,102,103,105],$Vk1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,90,91,92,93,95,96,97,98,99,100,101,102,103,105],$Vl1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,96,97,98,99,100,101,102,103,105],$Vm1=[1,237],$Vn1=[11,12,14,15,25,28,69],$Vo1=[1,261],$Vp1=[2,44],$Vq1=[1,275],$Vr1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,70,77,78,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105],$Vs1=[14,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"Type":9,"id":10,"igual":11,"curlyBraceOpen":12,"parsObj":13,"curlyBraceClose":14,"semicolon":15,"funciones":16,"IF":17,"WHILE":18,"DOWHILE":19,"SWITCH":20,"FOR":21,"PL":22,"bracketOpen":23,"paramFunc":24,"bracketClose":25,"varLast":26,"paramFuncList":27,"comma":28,"E":29,"function":30,"funcParam":31,"funcDec":32,"dosPuntos":33,"types":34,"STMT":35,"funcParamList":36,"InstruccionI":37,"Break":38,"Continue":39,"return":40,"OP":41,"if":42,"exp":43,"IFLAST":44,"else":45,"IFCOND":46,"while":47,"do":48,"switch":49,"FIRSTCASE":50,"LASTCASE":51,"CASE":52,"case":53,"DEFCASE":54,"ENDCASE":55,"default":56,"for":57,"let":58,"forOP":59,"in":60,"of":61,"forDec":62,"defVarLast":63,"defVarLastP":64,"defLast":65,"defType":66,"asignLast":67,"asignLastF":68,"sqBracketOpen":69,"sqBracketClose":70,"auxP":71,"point":72,"masIgual":73,"menosIgual":74,"porIgual":75,"divisionIgual":76,"increment":77,"decrement":78,"objType":79,"opkv":80,"keyvalueT":81,"const":82,"number":83,"typesList":84,"boolean":85,"string":86,"void":87,"typesL":88,"objetoParam":89,"mas":90,"menos":91,"por":92,"division":93,"potencia":94,"modulo":95,"mayorque":96,"menorque":97,"mayorigualque":98,"menorigualque":99,"igualdad":100,"diferencia":101,"and":102,"or":103,"not":104,"question":105,"NUMBER":106,"STRING":107,"true":108,"false":109,"null":110,"undefined":111,"arrParam":112,"sqBCKFIN":113,"sqBckList":114,"listArrParam":115,"objetoParamList":116,"keyvalue":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Type",10:"id",11:"igual",12:"curlyBraceOpen",14:"curlyBraceClose",15:"semicolon",23:"bracketOpen",25:"bracketClose",28:"comma",30:"function",33:"dosPuntos",38:"Break",39:"Continue",40:"return",42:"if",45:"else",47:"while",48:"do",49:"switch",53:"case",56:"default",57:"for",58:"let",60:"in",61:"of",69:"sqBracketOpen",70:"sqBracketClose",72:"point",73:"masIgual",74:"menosIgual",75:"porIgual",76:"divisionIgual",77:"increment",78:"decrement",82:"const",83:"number",85:"boolean",86:"string",87:"void",90:"mas",91:"menos",92:"por",93:"division",94:"potencia",95:"modulo",96:"mayorque",97:"menorque",98:"mayorigualque",99:"menorigualque",100:"igualdad",101:"diferencia",102:"and",103:"or",104:"not",105:"question",106:"NUMBER",107:"STRING",108:"true",109:"false",110:"null",111:"undefined"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,7],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[22,1],[22,0],[24,1],[24,0],[27,3],[27,1],[16,6],[32,5],[32,3],[31,1],[31,0],[36,5],[36,3],[35,2],[35,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,2],[37,2],[41,2],[41,1],[17,8],[44,2],[44,0],[46,8],[46,3],[18,7],[19,9],[20,8],[50,1],[50,0],[52,5],[52,4],[51,2],[54,3],[55,1],[55,0],[21,14],[21,13],[21,11],[21,10],[21,9],[59,1],[59,1],[62,1],[62,1],[63,2],[63,0],[64,4],[64,2],[8,5],[8,3],[8,2],[65,4],[65,2],[67,2],[67,1],[26,4],[26,3],[71,1],[71,0],[68,2],[68,2],[68,2],[68,2],[68,2],[68,1],[68,1],[13,1],[13,0],[79,3],[79,1],[80,1],[80,1],[81,3],[66,1],[66,1],[34,2],[34,2],[34,2],[34,2],[34,2],[84,1],[84,0],[88,3],[88,2],[29,1],[29,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,5],[43,2],[43,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,2],[43,1],[43,5],[43,4],[113,1],[113,0],[114,4],[114,3],[112,1],[112,0],[115,3],[115,1],[89,1],[89,0],[116,3],[116,1],[117,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,16:7,17:8,18:9,19:10,20:11,21:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:$V0,10:$V1,16:7,17:8,18:9,19:10,20:11,21:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,25]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{11:$Vb,22:26,23:$Vc,26:28,67:27,68:29,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk},{10:[1,39]},{10:[1,40]},{23:[1,41]},{23:[1,42]},{12:[1,43]},{23:[1,44]},{23:[1,45]},{10:[2,96]},{10:[2,97]},{1:[2,1]},o($Va,[2,2]),{11:[1,46]},{23:[1,47]},o($Vl,[2,73],{15:[1,48]}),{11:$Vb,23:$Vm,68:49,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk},o($Vn,[2,77]),{10:$Vo,23:$Vp,43:50,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:[1,62]},{10:$Vo,12:$Vz,23:$Vp,29:63,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,12:$Vz,23:$Vp,29:66,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,12:$Vz,23:$Vp,29:67,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,12:$Vz,23:$Vp,29:68,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,12:$Vz,23:$Vp,29:69,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($Vn,[2,87]),o($Vn,[2,88]),{33:$VA,65:70},{23:[1,72]},{10:$Vo,23:$Vp,43:73,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:74,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:75,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$Vo,23:$Vp,43:88,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:90,58:[1,89],69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{12:[1,91]},{10:$Vo,12:$Vz,23:$Vp,24:92,25:$VE,27:93,29:94,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($Vl,[2,72]),o($Vn,[2,76]),{70:[1,95],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{10:$Vo,23:$Vp,43:113,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:114,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:115,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($VW,[2,129]),o($VW,[2,130]),o($VW,[2,131]),o($VW,[2,132]),o($VW,[2,133]),o($VW,[2,134]),o($VW,[2,136],{26:116,22:117,23:$Vc,69:$Vd,72:$Ve}),{10:$Vo,12:$Vz,23:$Vp,29:120,43:64,69:$Vq,70:$VX,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,112:118,115:119},o($VY,$VZ,{71:121,26:122,69:$Vd,72:$Ve}),o($Vn,[2,82]),o($V_,[2,107],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV}),{10:$V$,14:[2,148],89:123,116:124,117:125},o($Vn,[2,83]),o($Vn,[2,84]),o($Vn,[2,85]),o($Vn,[2,86]),{15:[2,68],28:[1,128],63:127},{10:$V01,34:129,83:$V11,85:$V21,86:$V31,87:$V41},{10:[1,137],25:[2,24],31:135,36:136},{25:[1,138],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{25:[1,139],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{7:77,8:78,10:$V1,14:[1,140],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($V51,[2,28]),o($V51,[2,29]),o($V51,[2,30]),o($V51,[2,31]),o($V51,[2,32]),o($V51,[2,33]),o($V51,[2,34]),o($V51,[2,35]),o($V51,[2,36]),{15:[1,142]},{15:[1,143]},{10:$Vo,12:$Vz,15:[1,146],23:$Vp,29:145,41:144,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{25:[1,147],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{10:[1,148]},{11:[1,149],15:[1,150],59:151,60:$V61,61:$V71,77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{10:$V81,13:154,14:[2,90],79:155,81:156},{25:[1,158]},{25:[2,16],28:[1,159]},o($V91,[2,19]),o($VY,$VZ,{26:122,71:160,69:$Vd,72:$Ve}),{10:$Vo,23:$Vp,43:161,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:162,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:163,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:164,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:165,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:166,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:167,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:168,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:169,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:170,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:171,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:172,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:173,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:174,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:175,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($VW,[2,127]),o($VW,[2,128]),o($VW,[2,113]),o($VW,[2,124]),{25:[1,176],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},o($VW,[2,135],{23:$Vm}),{23:[1,177]},{70:[1,178]},{28:[1,179],70:[2,143]},o($Va1,[2,146]),o($VY,[2,79]),o($VY,[2,80]),{14:[1,180]},{14:[2,147],15:$Vb1,28:$Vc1,80:181},o($Vd1,[2,150]),{33:[1,184]},{15:[1,185]},{10:[1,187],64:186},o($Ve1,[2,75],{11:[1,188]}),o($Vf1,$Vg1,{84:189,88:190,69:$Vh1}),o($Vf1,$Vg1,{88:190,84:192,69:$Vh1}),o($Vf1,$Vg1,{88:190,84:193,69:$Vh1}),o($Vf1,$Vg1,{88:190,84:194,69:$Vh1}),o($Vf1,$Vg1,{88:190,84:195,69:$Vh1}),{25:[1,196]},{25:[2,23],28:[1,197]},{33:[1,198]},{12:[1,199]},{12:[1,200]},{47:[1,201]},o($V51,[2,27]),o($V51,[2,37]),o($V51,[2,38]),o($V51,[2,39]),{15:[1,202]},o($V51,[2,41]),{12:[1,203]},{11:[1,204],59:205,60:$V61,61:$V71},{10:$Vo,23:$Vp,43:206,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:207,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:208,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($Vi1,[2,63]),o($Vi1,[2,64]),{14:[1,209]},{14:[2,89],15:$Vb1,28:$Vc1,80:210},o($Vd1,[2,92]),{33:[1,211]},{15:[1,212]},{10:$Vo,12:$Vz,23:$Vp,29:213,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($VY,[2,78]),o($Vj1,[2,109],{77:$VF,78:$VG,92:$VJ,93:$VK,94:$VL,95:$VM}),o($Vj1,[2,110],{77:$VF,78:$VG,92:$VJ,93:$VK,94:$VL,95:$VM}),o($Vk1,[2,111],{77:$VF,78:$VG,94:$VL}),o($Vk1,[2,112],{77:$VF,78:$VG,94:$VL}),o($VW,[2,114]),o($Vk1,[2,115],{77:$VF,78:$VG,94:$VL}),o($Vl1,[2,116],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),o($Vl1,[2,117],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),o($Vl1,[2,118],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),o($Vl1,[2,119],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),o($Vl1,[2,120],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),o($Vl1,[2,121],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),o([5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,102,103,105],[2,122],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS}),o([5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,103,105],[2,123],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),{33:[1,214],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},o($VW,[2,125]),{10:$Vo,12:$Vz,23:$Vp,24:215,25:$VE,27:93,29:94,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($VW,[2,140],{113:216,114:217,69:[1,218]}),{10:$Vo,12:$Vz,23:$Vp,29:219,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($V_,[2,108]),{10:$V$,117:220},{10:[2,93]},{10:[2,94]},{10:$Vo,12:$Vz,23:$Vp,29:221,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($Vl,[2,71]),{15:[2,67],28:[1,222]},{33:$VA,65:223},{10:$Vo,12:$Vz,23:$Vp,29:224,43:64,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},o($Vf1,[2,98]),o($Vf1,[2,103],{69:[1,225]}),{70:[1,226]},o($Vf1,[2,99]),o($Vf1,[2,100]),o($Vf1,[2,101]),o($Vf1,[2,102]),{12:[1,229],32:227,33:[1,228]},{10:[1,230]},{10:$V01,34:231,83:$V11,85:$V21,86:$V31,87:$V41},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:232,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:233,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{23:[1,234]},o($V51,[2,40]),{50:235,52:236,53:$Vm1,56:[2,51]},{10:$Vo,23:$Vp,43:238,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:239,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{15:[1,240],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{15:[1,241],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{25:[1,242],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{15:[1,243]},{10:$V81,81:244},{10:$V01,34:245,83:$V11,85:$V21,86:$V31,87:$V41},o($Vl,[2,13]),o($V91,[2,18]),{10:$Vo,23:$Vp,43:246,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{25:[1,247]},o($VW,[2,138]),o($VW,[2,139],{69:[1,248]}),{10:$Vo,12:$Vz,23:$Vp,29:120,43:64,69:$Vq,70:$VX,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,112:249,115:119},o($Va1,[2,145]),o($Vd1,[2,149]),o($Vd1,[2,151]),{10:[1,250]},o($Ve1,[2,70]),o($Ve1,[2,74]),{70:[1,251]},o($Vn1,[2,106]),o($Vl,[2,20]),{10:$V01,34:252,83:$V11,85:$V21,86:$V31,87:$V41},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:253,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{33:[1,254]},o($V91,[2,26]),{7:77,8:78,10:$V1,14:[1,255],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:77,8:78,10:$V1,14:[1,256],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$Vo,23:$Vp,43:257,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{51:258,54:259,56:[1,260]},{53:$Vo1,56:[2,50]},{10:$Vo,23:$Vp,43:262,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{15:[1,263],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{25:[1,264],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{10:$Vo,23:$Vp,43:265,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{10:$Vo,23:$Vp,43:266,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{12:[1,267]},o($Va,[2,6]),o($Vd1,[2,91]),o($Vd1,[2,95]),o([5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82],[2,126],{77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV}),o($VW,[2,137]),{10:$Vo,12:$Vz,23:$Vp,29:120,43:64,69:$Vq,70:$VX,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,112:268,115:119},{70:[1,269]},{33:$VA,65:270},o($Vn1,[2,105]),{12:[1,271]},{7:77,8:78,10:$V1,14:[1,272],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$V01,34:273,83:$V11,85:$V21,86:$V31,87:$V41},o($Vl,$Vp1,{44:274,45:$Vq1}),o($Vl,[2,47]),{25:[1,276],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{14:[1,277]},{14:[2,57],52:279,53:$Vm1,55:278},{33:[1,280]},{10:$Vo,23:$Vp,43:281,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{33:[1,282],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{10:$Vo,23:$Vp,43:283,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{12:[1,284]},{15:[1,285],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{25:[1,286],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:287,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{70:[1,288]},o($Vr1,[2,142]),o($Ve1,[2,69]),{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:289,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,22]),o($V91,[2,25]),o($Vl,[2,42]),{12:[1,292],42:[1,291],46:290},{15:[1,293]},o($Vl,[2,49]),{14:[2,54]},{14:[2,56],53:$Vo1},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:294,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{33:[1,295],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:296,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{15:[1,297],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:298,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$Vo,23:$Vp,43:299,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{12:[1,300]},{7:77,8:78,10:$V1,14:[1,301],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vr1,[2,141]),{7:77,8:78,10:$V1,14:[1,302],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,43]),{23:[1,303]},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:304,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,48]),o([14,53],[2,55],{66:14,7:77,8:78,16:79,17:80,18:81,19:82,20:83,21:84,37:141,10:$V1,30:$V2,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,82:$V9}),{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:305,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vs1,[2,53],{66:14,7:77,8:78,16:79,17:80,18:81,19:82,20:83,21:84,37:141,10:$V1,30:$V2,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,82:$V9}),{10:$Vo,23:$Vp,43:306,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{7:77,8:78,10:$V1,14:[1,307],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{25:[1,308],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:309,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,62]),o($Vl,[2,21]),{10:$Vo,23:$Vp,43:310,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy},{7:77,8:78,10:$V1,14:[1,311],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vs1,[2,52],{66:14,7:77,8:78,16:79,17:80,18:81,19:82,20:83,21:84,37:141,10:$V1,30:$V2,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,82:$V9}),{25:[1,312],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},o($Vl,[2,61]),{12:[1,313]},{7:77,8:78,10:$V1,14:[1,314],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{25:[1,315],77:$VF,78:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT,103:$VU,105:$VV},o($Vl,[2,46]),{12:[1,316]},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:317,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,60]),{12:[1,318]},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:319,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:77,8:78,10:$V1,14:[1,320],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:77,8:78,10:$V1,16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,35:321,37:76,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:77,8:78,10:$V1,14:[1,322],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,59]),{7:77,8:78,10:$V1,14:[1,323],16:79,17:80,18:81,19:82,20:83,21:84,30:$V2,37:141,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,58]),o($Vl,$Vp1,{44:324,45:$Vq1}),o($Vl,[2,45])],
defaultActions: {21:[2,96],22:[2,97],23:[2,1],182:[2,93],183:[2,94],278:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Comentario Linea
break;
case 1://Comentaio Multilinea
break;
case 2:return 39;
break;
case 3:return 38;
break;
case 4:return 110;
break;
case 5:return 9;
break;
case 6:return 82;
break;
case 7:return 58;
break;
case 8:return 82;
break;
case 9:return 30;
break;
case 10:return 42;
break;
case 11:return 45;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 53;
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 60;
break;
case 19:return 61;
break;
case 20:return 83;
break;
case 21:return 85;
break;
case 22:return 86;
break;
case 23:return 87;
break;
case 24:return 108;
break;
case 25:return 109;
break;
case 26:return 111;
break;
case 27:return 40;
break;
case 28:return 73;
break;
case 29:return 74;
break;
case 30:return 75;
break;
case 31:return 76;
break;
case 32:return 12;
break;
case 33:return 14;
break;
case 34:return 23;
break;
case 35:return 25;
break;
case 36:return 28;
break;
case 37:return 15;
break;
case 38:return 33;
break;
case 39:return 72;
break;
case 40:return 77;
break;
case 41:return 78;
break;
case 42:return 90;
break;
case 43:return 91;
break;
case 44:return 94;
break;
case 45:return 92;
break;
case 46:return 93;
break;
case 47:return 95;
break;
case 48:return 98;
break;
case 49:return 99;
break;
case 50:return 96;
break;
case 51:return 97;
break;
case 52:return 100;
break;
case 53:return 11;
break;
case 54:return 101;
break;
case 55:return 102;
break;
case 56:return 103;
break;
case 57:return 104;
break;
case 58:return 105;
break;
case 59:return 69;
break;
case 60:return 70;
break;
case 61:
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:return 106;
break;
case 66:return 107;
break;
case 67:return 10;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:return\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:\s+)/,/^(?:\t+)/,/^(?:\r+)/,/^(?:\n+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*'|`[^\`]*`)/,/^(?:([a-zA-Z$_])[a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}