/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,13],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[5,9,10,30,42,47,48,49,57,58,82],$Vb=[1,32],$Vc=[2,15],$Vd=[1,30],$Ve=[1,31],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[5,9,10,14,30,38,39,40,42,47,48,49,53,56,57,58,82],$Vm=[2,14],$Vn=[5,9,10,14,15,30,38,39,40,42,47,48,49,53,56,57,58,82],$Vo=[1,59],$Vp=[1,53],$Vq=[1,60],$Vr=[1,51],$Vs=[1,52],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,64],$Vz=[1,70],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[2,17],$VE=[1,110],$VF=[1,111],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,106],$VS=[1,107],$VT=[1,108],$VU=[1,109],$VV=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,77,78,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105],$VW=[2,143],$VX=[5,9,10,11,14,15,23,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,73,74,75,76,77,78,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105],$VY=[2,81],$VZ=[5,9,10,14,15,25,28,30,38,39,40,42,47,48,49,53,56,57,58,70,82],$V_=[1,125],$V$=[1,133],$V01=[1,129],$V11=[1,130],$V21=[1,131],$V31=[1,132],$V41=[10,14,30,38,39,40,42,47,48,49,53,56,57,58,82],$V51=[1,151],$V61=[1,152],$V71=[1,156],$V81=[25,28],$V91=[28,70],$Va1=[1,182],$Vb1=[1,181],$Vc1=[14,15,28],$Vd1=[15,28],$Ve1=[11,12,14,15,25,28],$Vf1=[2,104],$Vg1=[1,190],$Vh1=[10,23,69,91,104,106,107,108,109,110],$Vi1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,90,91,96,97,98,99,100,101,102,103,105],$Vj1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,90,91,92,93,95,96,97,98,99,100,101,102,103,105],$Vk1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,96,97,98,99,100,101,102,103,105],$Vl1=[1,236],$Vm1=[11,12,14,15,25,28,69],$Vn1=[1,260],$Vo1=[2,44],$Vp1=[1,274],$Vq1=[5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,70,77,78,82,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105],$Vr1=[14,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"Type":9,"id":10,"igual":11,"curlyBraceOpen":12,"parsObj":13,"curlyBraceClose":14,"semicolon":15,"funciones":16,"IF":17,"WHILE":18,"DOWHILE":19,"SWITCH":20,"FOR":21,"PL":22,"bracketOpen":23,"paramFunc":24,"bracketClose":25,"varLast":26,"paramFuncList":27,"comma":28,"E":29,"function":30,"funcParam":31,"funcDec":32,"dosPuntos":33,"types":34,"STMT":35,"funcParamList":36,"InstruccionI":37,"Break":38,"Continue":39,"return":40,"OP":41,"if":42,"exp":43,"IFLAST":44,"else":45,"IFCOND":46,"while":47,"do":48,"switch":49,"FIRSTCASE":50,"LASTCASE":51,"CASE":52,"case":53,"DEFCASE":54,"ENDCASE":55,"default":56,"for":57,"let":58,"forOP":59,"in":60,"of":61,"forDec":62,"defVarLast":63,"defVarLastP":64,"defLast":65,"defType":66,"asignLast":67,"asignLastF":68,"sqBracketOpen":69,"sqBracketClose":70,"auxP":71,"point":72,"masIgual":73,"menosIgual":74,"porIgual":75,"divisionIgual":76,"increment":77,"decrement":78,"objType":79,"opkv":80,"keyvalueT":81,"const":82,"number":83,"typesList":84,"boolean":85,"string":86,"void":87,"typesL":88,"objetoParam":89,"mas":90,"menos":91,"por":92,"division":93,"potencia":94,"modulo":95,"mayorque":96,"menorque":97,"mayorigualque":98,"menorigualque":99,"igualdad":100,"diferencia":101,"and":102,"or":103,"not":104,"question":105,"NUMBER":106,"STRING":107,"true":108,"false":109,"null":110,"arrParam":111,"sqBCKFIN":112,"sqBckList":113,"listArrParam":114,"objetoParamList":115,"keyvalue":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Type",10:"id",11:"igual",12:"curlyBraceOpen",14:"curlyBraceClose",15:"semicolon",23:"bracketOpen",25:"bracketClose",28:"comma",30:"function",33:"dosPuntos",38:"Break",39:"Continue",40:"return",42:"if",45:"else",47:"while",48:"do",49:"switch",53:"case",56:"default",57:"for",58:"let",60:"in",61:"of",69:"sqBracketOpen",70:"sqBracketClose",72:"point",73:"masIgual",74:"menosIgual",75:"porIgual",76:"divisionIgual",77:"increment",78:"decrement",82:"const",83:"number",85:"boolean",86:"string",87:"void",90:"mas",91:"menos",92:"por",93:"division",94:"potencia",95:"modulo",96:"mayorque",97:"menorque",98:"mayorigualque",99:"menorigualque",100:"igualdad",101:"diferencia",102:"and",103:"or",104:"not",105:"question",106:"NUMBER",107:"STRING",108:"true",109:"false",110:"null"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,7],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[22,1],[22,0],[24,1],[24,0],[27,3],[27,1],[16,6],[32,5],[32,3],[31,1],[31,0],[36,5],[36,3],[35,2],[35,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,2],[37,2],[41,2],[41,1],[17,8],[44,2],[44,0],[46,8],[46,3],[18,7],[19,9],[20,8],[50,1],[50,0],[52,5],[52,4],[51,2],[54,3],[55,1],[55,0],[21,16],[21,13],[21,11],[21,10],[21,9],[59,1],[59,1],[62,1],[62,1],[63,2],[63,0],[64,4],[64,2],[8,5],[8,3],[8,2],[65,4],[65,2],[67,2],[67,1],[26,4],[26,3],[71,1],[71,0],[68,2],[68,2],[68,2],[68,2],[68,2],[68,1],[68,1],[13,1],[13,0],[79,3],[79,1],[80,1],[80,1],[81,3],[66,1],[66,1],[34,2],[34,2],[34,2],[34,2],[34,2],[84,1],[84,0],[88,3],[88,2],[29,1],[29,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,5],[43,2],[43,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,2],[43,1],[43,5],[43,4],[112,1],[112,0],[113,4],[113,3],[111,1],[111,0],[114,3],[114,1],[89,1],[89,0],[115,3],[115,1],[116,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 27:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 19:
 this.$ = [$$[$0]]; 
break;
case 4: case 16: case 43: case 107:
 this.$ = $$[$0]; 
break;
case 5: case 7:
 this.$=$$[$0]; 
break;
case 8:
 this.$ =$$[$0]; 
break;
case 9:
this.$ =$$[$0];
break;
case 10: case 11: case 12: case 14: case 23: case 29: case 30: case 32: case 33: case 34: case 35: case 36: case 50: case 56: case 80: case 96: case 97:
this.$=$$[$0];
break;
case 13:

					this.$ = new callFunction($$[$0-5],$$[$0-4],$$[$0-2]);
				
break;
case 15: case 41: case 57: case 68: case 81:
this.$=null;
break;
case 18:

					$$[$0-2].push($$[$0]);
					this.$ = $$[$0-2];
				
break;
case 20:

			   this.$ = new Function($$[$0-4],$$[$0-2],$$[$0]);
		   
break;
case 21:

			this.$ = {type:$$[$0-3],stmt:$$[$0-1]}
		
break;
case 22:

			this.$ = {type:null,stmt:$$[$0-1]}
		
break;
case 24: case 44: case 51:
this.$ = null;
break;
case 25:
$$[$0-4].push({id:$$[$0-2],types:$$[$0]}); this.$=$$[$0-4];
break;
case 26:
this.$ = [{id:$$[$0-2],types:$$[$0]}];
break;
case 28:
this.$=[$$[$0]];
break;
case 37:
this.$=new Break();
break;
case 38:
this.$=new Continue();
break;
case 39:
 this.$=new Return($$[$0]); 
break;
case 40:
this.$=$$[$0-1];
break;
case 42:

		this.$ = new If($$[$0-5],$$[$0-2],$$[$0]);
	
break;
case 45:

		   this.$ = new If($$[$0-5],$$[$0-2],$$[$0]);
	   
break;
case 46:

		   this.$ = new If(null,$$[$0-1],null);
	   
break;
case 47:

	this.$ = new While(0,0,$$[$0-4],$$[$0-1]);

break;
case 48:

	this.$ = new DoWhile(0,0,$$[$0-2],$$[$0-6]);

break;
case 49:

			this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1]);
		
break;
case 52:

		  $$[$0-4].push({exp:$$[$0-2],stmt:$$[$0]});
		  this.$ = $$[$0-4];
	  
break;
case 53:

		 this.$ = [{exp:$$[$0-2],stmt:$$[$0]}]
	 
break;
case 54:

	this.$ = $$[$0-1];

break;
case 55:

	this.$ = $$[$0];

break;
case 58:

		this.$ = new For($$[$0-13],$$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 59:

		this.$ = new For2($$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 60:

		this.$ = new ForThree($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 71:

				this.$ = new Variables($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
			
break;
case 72:

			  this.$ = new VariableChange($$[$0-2],$$[$0-1]);
		  
break;
case 73:

			  this.$ = new VariableChange($$[$0-1],$$[$0]);
		  
break;
case 74:

			this.$ = new defLast($$[$0-2],$$[$0]);
		
break;
case 75:

			this.$ = new defLast($$[$0],null);
		
break;
case 77:
this.$ = $$[$0];
break;
case 82:

				this.$ = {tipo:'=',value:$$[$0]}
			
break;
case 83:

				this.$ = {tipo:'+',value:$$[$0]}
			
break;
case 84:

				this.$ = {tipo:'-',value:$$[$0]}
			
break;
case 85:

				this.$ = {tipo:'*',value:$$[$0]}
			
break;
case 86:

				this.$ = {tipo:'/',value:$$[$0]}
			
break;
case 87:

				this.$ = {tipo:'++',value:null}
			
break;
case 88:

				this.$ = {tipo:'--',value:null}
			
break;
case 98: case 99: case 100: case 101: case 102:

			this.$ = {type:$$[$0-1],list:$$[$0]}
		
break;
case 104:
this.$ = 0;
break;
case 105:

			this.$ = $$[$0-2] + 1;
		
break;
case 106:

			this.$ = 1;
		
break;
case 109:

		this.$ = new Operation($$[$0-2],$$[$0],'+',0,0);
	
break;
case 110:

		this.$ = new Operation($$[$0-2],$$[$0],'-',0,0);
	
break;
case 111:

		this.$ = new Operation($$[$0-2],$$[$0],'*',0,0);
	
break;
case 112:

		this.$ = new Operation($$[$0-2],$$[$0],'/',0,0);
	
break;
case 113:

		this.$ = new Operation($$[$0],null,'--',0,0);
	
break;
case 114:

		this.$ = new Operation($$[$0-2],$$[$0],'**',0,0);
	
break;
case 115:

		this.$ = new Operation($$[$0-2],$$[$0],'%',0,0);
	
break;
case 116:

		this.$ = new Relational($$[$0-2],$$[$0],'>',0,0);
	
break;
case 117:

		this.$ = new Relational($$[$0-2],$$[$0],'<',0,0);
	
break;
case 118:

		this.$ = new Relational($$[$0-2],$$[$0],'>=',0,0);
	
break;
case 119:

		this.$ = new Relational($$[$0-2],$$[$0],'<=',0,0);
	
break;
case 120:

		this.$ = new Relational($$[$0-2],$$[$0],'==',0,0);
	
break;
case 121:

		this.$ = new Relational($$[$0-2],$$[$0],'!=',0,0);
	
break;
case 122:

		this.$ = new Logical($$[$0-2],$$[$0],'&&',0,0);
	
break;
case 123:

		this.$ = new Logical($$[$0-2],$$[$0],'||',0,0);
	
break;
case 124:

		this.$ = new Logical($$[$0],null,'!',0,0);
	
break;
case 125:

		this.$ =$$[$0-1];
	
break;
case 127:

		this.$ = new IncDecOp($$[$0-1],'+');
	
break;
case 128:

		this.$ = new IncDecOp($$[$0-1],'-');
	
break;
case 129:

		this.$ = new tsObject(0,0,$$[$0],'number');
	
break;
case 130:

		this.$ = new tsObject(0,0,$$[$0],'string');
	
break;
case 131:

		this.$ = new tsObject(0,0,1,'boolean');
	
break;
case 132:

		this.$ = new tsObject(0,0,0,'boolean');
	
break;
case 135:

		this.$ = new Id(0,0,$$[$0]);
	
break;
case 136:

		this.$ = new callFunction($$[$0-4],$$[$0-3],$$[$0-1]);
	
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,16:7,17:8,18:9,19:10,20:11,21:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:$V0,10:$V1,16:7,17:8,18:9,19:10,20:11,21:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,25]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{11:$Vb,22:26,23:$Vc,26:28,67:27,68:29,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk},{10:[1,39]},{10:[1,40]},{23:[1,41]},{23:[1,42]},{12:[1,43]},{23:[1,44]},{23:[1,45]},{10:[2,96]},{10:[2,97]},{1:[2,1]},o($Va,[2,2]),{11:[1,46]},{23:[1,47]},o($Vl,[2,73],{15:[1,48]}),{11:$Vb,23:$Vm,68:49,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk},o($Vn,[2,77]),{10:$Vo,23:$Vp,43:50,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:[1,61]},{10:$Vo,12:$Vy,23:$Vp,29:62,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,12:$Vy,23:$Vp,29:65,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,12:$Vy,23:$Vp,29:66,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,12:$Vy,23:$Vp,29:67,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,12:$Vy,23:$Vp,29:68,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($Vn,[2,87]),o($Vn,[2,88]),{33:$Vz,65:69},{23:[1,71]},{10:$Vo,23:$Vp,43:72,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:73,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:74,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$Vo,23:$Vp,43:87,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:89,58:[1,88],69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{12:[1,90]},{10:$Vo,12:$Vy,23:$Vp,24:91,25:$VD,27:92,29:93,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($Vl,[2,72]),o($Vn,[2,76]),{70:[1,94],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{10:$Vo,23:$Vp,43:112,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:113,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:114,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($VV,[2,129]),o($VV,[2,130]),o($VV,[2,131]),o($VV,[2,132]),o($VV,[2,133]),o($VV,[2,135],{26:115,22:116,23:$Vc,69:$Vd,72:$Ve}),{10:$Vo,12:$Vy,23:$Vp,29:119,43:63,69:$Vq,70:$VW,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:117,114:118},o($VX,$VY,{71:120,26:121,69:$Vd,72:$Ve}),o($Vn,[2,82]),o($VZ,[2,107],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU}),{10:$V_,14:[2,147],89:122,115:123,116:124},o($Vn,[2,83]),o($Vn,[2,84]),o($Vn,[2,85]),o($Vn,[2,86]),{15:[2,68],28:[1,127],63:126},{10:$V$,34:128,83:$V01,85:$V11,86:$V21,87:$V31},{10:[1,136],25:[2,24],31:134,36:135},{25:[1,137],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{25:[1,138],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{7:76,8:77,10:$V1,14:[1,139],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($V41,[2,28]),o($V41,[2,29]),o($V41,[2,30]),o($V41,[2,31]),o($V41,[2,32]),o($V41,[2,33]),o($V41,[2,34]),o($V41,[2,35]),o($V41,[2,36]),{15:[1,141]},{15:[1,142]},{10:$Vo,12:$Vy,15:[1,145],23:$Vp,29:144,41:143,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{25:[1,146],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{10:[1,147]},{11:[1,148],15:[1,149],59:150,60:$V51,61:$V61,77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{10:$V71,13:153,14:[2,90],79:154,81:155},{25:[1,157]},{25:[2,16],28:[1,158]},o($V81,[2,19]),o($VX,$VY,{26:121,71:159,69:$Vd,72:$Ve}),{10:$Vo,23:$Vp,43:160,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:161,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:162,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:163,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:164,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:165,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:166,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:167,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:168,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:169,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:170,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:171,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:172,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:173,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:174,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($VV,[2,127]),o($VV,[2,128]),o($VV,[2,113]),o($VV,[2,124]),{25:[1,175],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},o($VV,[2,134],{23:$Vm}),{23:[1,176]},{70:[1,177]},{28:[1,178],70:[2,142]},o($V91,[2,145]),o($VX,[2,79]),o($VX,[2,80]),{14:[1,179]},{14:[2,146],15:$Va1,28:$Vb1,80:180},o($Vc1,[2,149]),{33:[1,183]},{15:[1,184]},{10:[1,186],64:185},o($Vd1,[2,75],{11:[1,187]}),o($Ve1,$Vf1,{84:188,88:189,69:$Vg1}),o($Ve1,$Vf1,{88:189,84:191,69:$Vg1}),o($Ve1,$Vf1,{88:189,84:192,69:$Vg1}),o($Ve1,$Vf1,{88:189,84:193,69:$Vg1}),o($Ve1,$Vf1,{88:189,84:194,69:$Vg1}),{25:[1,195]},{25:[2,23],28:[1,196]},{33:[1,197]},{12:[1,198]},{12:[1,199]},{47:[1,200]},o($V41,[2,27]),o($V41,[2,37]),o($V41,[2,38]),o($V41,[2,39]),{15:[1,201]},o($V41,[2,41]),{12:[1,202]},{33:[1,203],59:204,60:$V51,61:$V61},{10:$Vo,23:$Vp,43:205,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:206,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:207,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($Vh1,[2,63]),o($Vh1,[2,64]),{14:[1,208]},{14:[2,89],15:$Va1,28:$Vb1,80:209},o($Vc1,[2,92]),{33:[1,210]},{15:[1,211]},{10:$Vo,12:$Vy,23:$Vp,29:212,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($VX,[2,78]),o($Vi1,[2,109],{77:$VE,78:$VF,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vi1,[2,110],{77:$VE,78:$VF,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vj1,[2,111],{77:$VE,78:$VF,94:$VK}),o($Vj1,[2,112],{77:$VE,78:$VF,94:$VK}),o($VV,[2,114]),o($Vj1,[2,115],{77:$VE,78:$VF,94:$VK}),o($Vk1,[2,116],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vk1,[2,117],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vk1,[2,118],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vk1,[2,119],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vk1,[2,120],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vk1,[2,121],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o([5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,102,103,105],[2,122],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o([5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82,103,105],[2,123],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS}),{33:[1,213],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},o($VV,[2,125]),{10:$Vo,12:$Vy,23:$Vp,24:214,25:$VD,27:92,29:93,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($VV,[2,139],{112:215,113:216,69:[1,217]}),{10:$Vo,12:$Vy,23:$Vp,29:218,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($VZ,[2,108]),{10:$V_,116:219},{10:[2,93]},{10:[2,94]},{10:$Vo,12:$Vy,23:$Vp,29:220,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($Vl,[2,71]),{15:[2,67],28:[1,221]},{33:$Vz,65:222},{10:$Vo,12:$Vy,23:$Vp,29:223,43:63,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},o($Ve1,[2,98]),o($Ve1,[2,103],{69:[1,224]}),{70:[1,225]},o($Ve1,[2,99]),o($Ve1,[2,100]),o($Ve1,[2,101]),o($Ve1,[2,102]),{12:[1,228],32:226,33:[1,227]},{10:[1,229]},{10:$V$,34:230,83:$V01,85:$V11,86:$V21,87:$V31},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:231,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:232,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{23:[1,233]},o($V41,[2,40]),{50:234,52:235,53:$Vl1,56:[2,51]},{10:$V$,34:237,83:$V01,85:$V11,86:$V21,87:$V31},{10:$Vo,23:$Vp,43:238,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{15:[1,239],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{15:[1,240],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{25:[1,241],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{15:[1,242]},{10:$V71,81:243},{10:$V$,34:244,83:$V01,85:$V11,86:$V21,87:$V31},o($Vl,[2,13]),o($V81,[2,18]),{10:$Vo,23:$Vp,43:245,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{25:[1,246]},o($VV,[2,137]),o($VV,[2,138],{69:[1,247]}),{10:$Vo,12:$Vy,23:$Vp,29:119,43:63,69:$Vq,70:$VW,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:248,114:118},o($V91,[2,144]),o($Vc1,[2,148]),o($Vc1,[2,150]),{10:[1,249]},o($Vd1,[2,70]),o($Vd1,[2,74]),{70:[1,250]},o($Vm1,[2,106]),o($Vl,[2,20]),{10:$V$,34:251,83:$V01,85:$V11,86:$V21,87:$V31},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:252,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{33:[1,253]},o($V81,[2,26]),{7:76,8:77,10:$V1,14:[1,254],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:76,8:77,10:$V1,14:[1,255],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$Vo,23:$Vp,43:256,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{51:257,54:258,56:[1,259]},{53:$Vn1,56:[2,50]},{10:$Vo,23:$Vp,43:261,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{11:[1,262]},{25:[1,263],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{10:$Vo,23:$Vp,43:264,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{10:$Vo,23:$Vp,43:265,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{12:[1,266]},o($Va,[2,6]),o($Vc1,[2,91]),o($Vc1,[2,95]),o([5,9,10,11,14,15,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,70,82],[2,126],{77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU}),o($VV,[2,136]),{10:$Vo,12:$Vy,23:$Vp,29:119,43:63,69:$Vq,70:$VW,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:267,114:118},{70:[1,268]},{33:$Vz,65:269},o($Vm1,[2,105]),{12:[1,270]},{7:76,8:77,10:$V1,14:[1,271],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$V$,34:272,83:$V01,85:$V11,86:$V21,87:$V31},o($Vl,$Vo1,{44:273,45:$Vp1}),o($Vl,[2,47]),{25:[1,275],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{14:[1,276]},{14:[2,57],52:278,53:$Vl1,55:277},{33:[1,279]},{10:$Vo,23:$Vp,43:280,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{33:[1,281],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{10:$Vo,23:$Vp,43:282,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{12:[1,283]},{15:[1,284],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{25:[1,285],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:286,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{70:[1,287]},o($Vq1,[2,141]),o($Vd1,[2,69]),{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:288,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,22]),o($V81,[2,25]),o($Vl,[2,42]),{12:[1,291],42:[1,290],46:289},{15:[1,292]},o($Vl,[2,49]),{14:[2,54]},{14:[2,56],53:$Vn1},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:293,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{33:[1,294],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:295,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{15:[1,296],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:297,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{10:$Vo,23:$Vp,43:298,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{12:[1,299]},{7:76,8:77,10:$V1,14:[1,300],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vq1,[2,140]),{7:76,8:77,10:$V1,14:[1,301],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,43]),{23:[1,302]},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:303,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,48]),o([14,53],[2,55],{66:14,7:76,8:77,16:78,17:79,18:80,19:81,20:82,21:83,37:140,10:$V1,30:$V2,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,82:$V9}),{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:304,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vr1,[2,53],{66:14,7:76,8:77,16:78,17:79,18:80,19:81,20:82,21:83,37:140,10:$V1,30:$V2,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,82:$V9}),{10:$Vo,23:$Vp,43:305,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{7:76,8:77,10:$V1,14:[1,306],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{25:[1,307],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:308,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,62]),o($Vl,[2,21]),{10:$Vo,23:$Vp,43:309,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{7:76,8:77,10:$V1,14:[1,310],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vr1,[2,52],{66:14,7:76,8:77,16:78,17:79,18:80,19:81,20:82,21:83,37:140,10:$V1,30:$V2,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,82:$V9}),{15:[1,311],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},o($Vl,[2,61]),{12:[1,312]},{7:76,8:77,10:$V1,14:[1,313],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{25:[1,314],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},o($Vl,[2,46]),{10:$Vo,23:$Vp,43:315,69:$Vq,91:$Vr,104:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:316,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,60]),{12:[1,317]},{25:[1,318],77:$VE,78:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,105:$VU},{7:76,8:77,10:$V1,14:[1,319],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:320,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{12:[1,321]},o($Vl,[2,59]),{7:76,8:77,10:$V1,14:[1,322],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},{7:76,8:77,10:$V1,16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,35:323,37:75,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,$Vo1,{44:324,45:$Vp1}),{7:76,8:77,10:$V1,14:[1,325],16:78,17:79,18:80,19:81,20:82,21:83,30:$V2,37:140,38:$VA,39:$VB,40:$VC,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,66:14,82:$V9},o($Vl,[2,45]),o($Vl,[2,58])],
defaultActions: {21:[2,96],22:[2,97],23:[2,1],181:[2,93],182:[2,94],277:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


	const Logical  = require('./CodigoIntermedio/Logical.js');
	const Operation = require('./CodigoIntermedio/Operation.js');
	const Relational = require('./CodigoIntermedio/Relational.js');
	const tsObject =  require('./CodigoIntermedio/tsObject.js')
	const Print =     require('./CodigoIntermedio/Print.js')
	const Variables = require('./CodigoIntermedio/Variable.js')
	const defLast = require('./CodigoIntermedio/defLast.js')
	const Id = require('./CodigoIntermedio/Id.js')
	const If = require('./CodigoIntermedio/If.js')
	const VariableChange = require('./CodigoIntermedio/VariableChange.js');
	const While = require('./CodigoIntermedio/While.js');
	const DoWhile = require('./CodigoIntermedio/DoWhile.js');
	const Switch = require('./CodigoIntermedio/Switch.js');
	const For = require('./CodigoIntermedio/For.js')
	const IncDecOp = require('./CodigoIntermedio/IncDecOp.js');
	const For2 = require('./CodigoIntermedio/For2.js');
	const ForThree = require('./CodigoIntermedio/ForThree.js');
	const Function = require('./CodigoIntermedio/Function.js');
	const callFunction = require('./CodigoIntermedio/callFunction.js');
	const Return = require('./CodigoIntermedio/Return.js');
	const Break = require('./CodigoIntermedio/Break.js');
	const Continue = require('./CodigoIntermedio/Continue.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Comentario Linea
break;
case 1://Comentaio Multilinea
break;
case 2:return 39;
break;
case 3:return 38;
break;
case 4:return 110;
break;
case 5:return 9;
break;
case 6:return 82;
break;
case 7:return 58;
break;
case 8:return 82;
break;
case 9:return 30;
break;
case 10:return 42;
break;
case 11:return 45;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 53;
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 60;
break;
case 19:return 61;
break;
case 20:return 83;
break;
case 21:return 85;
break;
case 22:return 86;
break;
case 23:return 87;
break;
case 24:return 108;
break;
case 25:return 109;
break;
case 26:return 'undefined';
break;
case 27:return 40;
break;
case 28:return 73;
break;
case 29:return 74;
break;
case 30:return 75;
break;
case 31:return 76;
break;
case 32:return 12;
break;
case 33:return 14;
break;
case 34:return 23;
break;
case 35:return 25;
break;
case 36:return 28;
break;
case 37:return 15;
break;
case 38:return 33;
break;
case 39:return 72;
break;
case 40:return 77;
break;
case 41:return 78;
break;
case 42:return 90;
break;
case 43:return 91;
break;
case 44:return 94;
break;
case 45:return 92;
break;
case 46:return 93;
break;
case 47:return 95;
break;
case 48:return 98;
break;
case 49:return 99;
break;
case 50:return 96;
break;
case 51:return 97;
break;
case 52:return 100;
break;
case 53:return 11;
break;
case 54:return 101;
break;
case 55:return 102;
break;
case 56:return 103;
break;
case 57:return 104;
break;
case 58:return 105;
break;
case 59:return 69;
break;
case 60:return 70;
break;
case 61:
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:return 106;
break;
case 66:return 107;
break;
case 67:return 10;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:return\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:\s+)/,/^(?:\t+)/,/^(?:\r+)/,/^(?:\n+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*'|`[^\`]*`)/,/^(?:([a-zA-Z$_])[a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}