/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,14],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[5,11,12,30,42,47,48,49,57,58,81],$Vb=[1,35],$Vc=[2,17],$Vd=[1,33],$Ve=[1,34],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[5,8,11,12,30,38,39,40,42,47,48,49,53,56,57,58,81],$Vm=[2,16],$Vn=[5,7,8,11,12,30,38,39,40,42,47,48,49,53,56,57,58,81],$Vo=[1,62],$Vp=[1,56],$Vq=[1,64],$Vr=[1,54],$Vs=[1,55],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,63],$Vz=[1,68],$VA=[1,74],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[2,19],$VF=[1,114],$VG=[1,115],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[1,107],$VQ=[1,108],$VR=[1,109],$VS=[1,110],$VT=[1,111],$VU=[1,112],$VV=[1,113],$VW=[5,7,8,11,12,13,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,76,77,81,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104],$VX=[5,7,8,11,12,13,23,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,72,73,74,75,76,77,81,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104],$VY=[2,81],$VZ=[5,7,8,11,12,25,28,30,38,39,40,42,47,48,49,53,56,57,58,69,81],$V_=[1,130],$V$=[1,138],$V01=[1,134],$V11=[1,135],$V21=[1,136],$V31=[1,137],$V41=[8,12,30,38,39,40,42,47,48,49,53,56,57,58,81],$V51=[1,156],$V61=[1,157],$V71=[1,161],$V81=[25,28],$V91=[28,69],$Va1=[1,188],$Vb1=[1,187],$Vc1=[7,8,28],$Vd1=[7,28],$Ve1=[7,8,13,14,25,28],$Vf1=[2,104],$Vg1=[1,196],$Vh1=[12,23,68,90,103,105,106,107,108,109,110],$Vi1=[5,7,8,11,12,13,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,81,89,90,95,96,97,98,99,100,101,102,104],$Vj1=[5,7,8,11,12,13,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,81,89,90,91,92,94,95,96,97,98,99,100,101,102,104],$Vk1=[5,7,8,11,12,13,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,81,95,96,97,98,99,100,101,102,104],$Vl1=[1,240],$Vm1=[7,8,13,14,25,28,68],$Vn1=[1,263],$Vo1=[2,46],$Vp1=[1,275],$Vq1=[8,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"semicolon":7,"curlyBraceClose":8,"llamadaFuncion":9,"variables":10,"Type":11,"id":12,"igual":13,"curlyBraceOpen":14,"parsObj":15,"funciones":16,"IF":17,"WHILE":18,"DOWHILE":19,"SWITCH":20,"FOR":21,"PL":22,"bracketOpen":23,"paramFunc":24,"bracketClose":25,"varLast":26,"paramFuncList":27,"comma":28,"E":29,"function":30,"funcParam":31,"funcDec":32,"dosPuntos":33,"types":34,"STMT":35,"funcParamList":36,"InstruccionI":37,"Break":38,"Continue":39,"return":40,"OP":41,"if":42,"exp":43,"IFLAST":44,"else":45,"IFCOND":46,"while":47,"do":48,"switch":49,"FIRSTCASE":50,"LASTCASE":51,"CASE":52,"case":53,"DEFCASE":54,"ENDCASE":55,"default":56,"for":57,"let":58,"forOP":59,"in":60,"of":61,"defVarLast":62,"defVarLastP":63,"defLast":64,"defType":65,"asignLast":66,"asignLastF":67,"sqBracketOpen":68,"sqBracketClose":69,"auxP":70,"point":71,"masIgual":72,"menosIgual":73,"porIgual":74,"divisionIgual":75,"increment":76,"decrement":77,"objType":78,"opkv":79,"keyvalueT":80,"const":81,"number":82,"typesList":83,"boolean":84,"string":85,"void":86,"typesL":87,"objetoParam":88,"mas":89,"menos":90,"por":91,"division":92,"potencia":93,"modulo":94,"mayorque":95,"menorque":96,"mayorigualque":97,"menorigualque":98,"igualdad":99,"diferencia":100,"and":101,"or":102,"not":103,"question":104,"NUMBER":105,"STRING":106,"true":107,"false":108,"null":109,"new":110,"arrParam":111,"sqBckList":112,"listArrParam":113,"objetoParamList":114,"keyvalue":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"semicolon",8:"curlyBraceClose",11:"Type",12:"id",13:"igual",14:"curlyBraceOpen",23:"bracketOpen",25:"bracketClose",28:"comma",30:"function",33:"dosPuntos",38:"Break",39:"Continue",40:"return",42:"if",45:"else",47:"while",48:"do",49:"switch",53:"case",56:"default",57:"for",58:"let",60:"in",61:"of",68:"sqBracketOpen",69:"sqBracketClose",71:"point",72:"masIgual",73:"menosIgual",74:"porIgual",75:"divisionIgual",76:"increment",77:"decrement",81:"const",82:"number",84:"boolean",85:"string",86:"void",89:"mas",90:"menos",91:"por",92:"division",93:"potencia",94:"modulo",95:"mayorque",96:"menorque",97:"mayorigualque",98:"menorigualque",99:"igualdad",100:"diferencia",101:"and",102:"or",103:"not",104:"question",105:"NUMBER",106:"STRING",107:"true",108:"false",109:"null",110:"new"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[4,2],[6,1],[6,1],[6,7],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,6],[22,1],[22,0],[24,1],[24,0],[27,3],[27,1],[16,6],[32,5],[32,3],[31,1],[31,0],[36,5],[36,3],[35,2],[35,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,2],[37,2],[41,2],[41,1],[17,8],[44,2],[44,0],[46,8],[46,3],[18,7],[19,9],[20,8],[50,1],[50,0],[52,5],[52,4],[51,2],[54,3],[55,1],[55,0],[21,16],[21,13],[21,11],[21,10],[21,9],[59,1],[59,1],[62,2],[62,0],[63,4],[63,2],[10,5],[10,3],[10,2],[64,4],[64,2],[66,2],[66,1],[26,4],[26,3],[70,1],[70,0],[67,2],[67,2],[67,2],[67,2],[67,2],[67,1],[67,1],[15,1],[15,0],[78,3],[78,1],[79,1],[79,1],[80,3],[65,1],[65,1],[34,2],[34,2],[34,2],[34,2],[34,2],[83,1],[83,0],[87,3],[87,2],[29,1],[29,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,5],[43,2],[43,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,2],[43,5],[43,1],[43,5],[43,3],[112,4],[112,3],[111,1],[111,0],[113,3],[113,1],[88,1],[88,0],[114,3],[114,1],[115,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {ast:$$[$0-1],tabla:tablaErrores}; 
break;
case 2: case 29:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 21:
 this.$ = [$$[$0]]; 
break;
case 4: case 5:

		tablaErrores.push({line:_$[$0-1].first_line,column:_$[$0-1].first_column,type:'Semantico',msg:'El caracter: ' + yytext + " no se esperaba"})
	
break;
case 6: case 18: case 45: case 107:
 this.$ = $$[$0]; 
break;
case 7: case 9:
 this.$=$$[$0]; 
break;
case 8: case 17: case 43: case 59: case 68: case 81:
this.$=null;
break;
case 10:
 this.$ =$$[$0]; 
break;
case 11:
this.$ =$$[$0];
break;
case 12: case 13: case 14: case 16: case 25: case 31: case 32: case 34: case 35: case 36: case 37: case 38: case 52: case 58: case 80: case 96: case 97: case 103:
this.$=$$[$0];
break;
case 15:

					this.$ = new callFunction($$[$0-5],$$[$0-4],$$[$0-2]);
				
break;
case 20:

					$$[$0-2].push($$[$0]);
					this.$ = $$[$0-2];
				
break;
case 22:

			   this.$ = new Function($$[$0-4],$$[$0-2],$$[$0]);
		   
break;
case 23:

			this.$ = {type:$$[$0-3],stmt:$$[$0-1]}
		
break;
case 24:

			this.$ = {type:null,stmt:$$[$0-1]}
		
break;
case 26: case 46: case 53: case 142:
this.$ = null;
break;
case 27:
$$[$0-4].push({id:$$[$0-2],types:$$[$0]}); this.$=$$[$0-4];
break;
case 28:
this.$ = [{id:$$[$0-2],types:$$[$0]}];
break;
case 30:
this.$=[$$[$0]];
break;
case 39:
this.$=new Break();
break;
case 40:
this.$=new Continue();
break;
case 41:
 this.$=new Return($$[$0]); 
break;
case 42:
this.$=$$[$0-1];
break;
case 44:

		this.$ = new If($$[$0-5],$$[$0-2],$$[$0]);
	
break;
case 47:

		   this.$ = new If($$[$0-5],$$[$0-2],$$[$0]);
	   
break;
case 48:

		   this.$ = new If(null,$$[$0-1],null);
	   
break;
case 49:

	this.$ = new While(0,0,$$[$0-4],$$[$0-1]);

break;
case 50:

	this.$ = new DoWhile(0,0,$$[$0-2],$$[$0-6]);

break;
case 51:

			this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1]);
		
break;
case 54:

			$$[$0-4].push({exp:$$[$0-2],stmt:$$[$0]});
			this.$ = $$[$0-4];
	  
break;
case 55:

			this.$ = [{exp:$$[$0-2],stmt:$$[$0]}]
	 
break;
case 56:

	this.$ = $$[$0-1];

break;
case 57:

	this.$ = $$[$0];

break;
case 60:

		this.$ = new For($$[$0-13],$$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 61:

		this.$ = new For2($$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 62:

		this.$ = new ForThree($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
	
break;
case 63:

		this.$ = new ForIO($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-1]);
	
break;
case 65:
this.$=1;
break;
case 66:
this.$=2;
break;
case 71:

				this.$ = new Variables($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
			
break;
case 72:

				this.$ = new VariableChange($$[$0-2],$$[$0-1]);
		  	
break;
case 73:

				this.$ = new VariableChange($$[$0-1],$$[$0]);
		  	
break;
case 74:

			this.$ = new defLast($$[$0-2],$$[$0]);
		
break;
case 75:

			this.$ = new defLast($$[$0],null);
		
break;
case 76:
 this.$={varLast:$$[$0-1],asignLastF:$$[$0],temp:true}; 
break;
case 77: case 141:
this.$ = $$[$0];
break;
case 78:

			this.$ = new List(true,$$[$0-2],$$[$0]);
		
break;
case 79:

			this.$ = new List(false,$$[$0-1],$$[$0]);
		
break;
case 82:

				this.$ = {tipo:'=',value:$$[$0]}
			
break;
case 83:

				this.$ = {tipo:'+',value:$$[$0]}
			
break;
case 84:

				this.$ = {tipo:'-',value:$$[$0]}
			
break;
case 85:

				this.$ = {tipo:'*',value:$$[$0]}
			
break;
case 86:

				this.$ = {tipo:'/',value:$$[$0]}
			
break;
case 87:

				this.$ = {tipo:'++',value:null}
			
break;
case 88:

				this.$ = {tipo:'--',value:null}
			
break;
case 98: case 99: case 100: case 101: case 102:

			this.$ = {type:$$[$0-1],list:$$[$0]}
		
break;
case 104:
this.$ = 0;
break;
case 105:

			this.$ = $$[$0-2] + 1;
		
break;
case 106:

			this.$ = 1;
		
break;
case 109:

		this.$ = new Operation($$[$0-2],$$[$0],'+',0,0);
	
break;
case 110:

		this.$ = new Operation($$[$0-2],$$[$0],'-',0,0);
	
break;
case 111:

		this.$ = new Operation($$[$0-2],$$[$0],'*',0,0);
	
break;
case 112:

		this.$ = new Operation($$[$0-2],$$[$0],'/',0,0);
	
break;
case 113:

		this.$ = new Operation($$[$0],null,'--',0,0);
	
break;
case 114:

		this.$ = new Operation($$[$0-2],$$[$0],'**',0,0);
	
break;
case 115:

		this.$ = new Operation($$[$0-2],$$[$0],'%',0,0);
	
break;
case 116:

		this.$ = new Relational($$[$0-2],$$[$0],'>',0,0);
	
break;
case 117:

		this.$ = new Relational($$[$0-2],$$[$0],'<',0,0);
	
break;
case 118:

		this.$ = new Relational($$[$0-2],$$[$0],'>=',0,0);
	
break;
case 119:

		this.$ = new Relational($$[$0-2],$$[$0],'<=',0,0);
	
break;
case 120:

		this.$ = new Relational($$[$0-2],$$[$0],'==',0,0);
	
break;
case 121:

		this.$ = new Relational($$[$0-2],$$[$0],'!=',0,0);
	
break;
case 122:

		this.$ = new Logical($$[$0-2],$$[$0],'&&',0,0);
	
break;
case 123:

		this.$ = new Logical($$[$0-2],$$[$0],'||',0,0);
	
break;
case 124:

		this.$ = new Logical($$[$0],null,'!',0,0);
	
break;
case 125:

		this.$ =$$[$0-1];
	
break;
case 126:

		this.$ = new Ternary($$[$0-4],$$[$0-2],$$[$0]);	
	
break;
case 127:

		this.$ = new IncDecOp($$[$0-1],'+');
	
break;
case 128:

		this.$ = new IncDecOp($$[$0-1],'-');
	
break;
case 129:

		this.$ = new tsObject(0,0,$$[$0],'number');
	
break;
case 130:

		this.$ = new tsObject(0,0,$$[$0],'string');
	
break;
case 131:

		this.$ = new tsObject(0,0,1,'boolean');
	
break;
case 132:

		this.$ = new tsObject(0,0,0,'boolean');
	
break;
case 133:

		this.$ = new tsObject(0,0,-100,'null');
	
break;
case 134:

		this.$ = new IdAccess($$[$0-1],$$[$0]);
	
break;
case 135:

		this.$ = new Arrayl($$[$0-3],$$[$0-1]);
	
break;
case 136:

		this.$ = new Id(0,0,$$[$0]);
	
break;
case 137:

		this.$ = new callFunction($$[$0-4],$$[$0-3],$$[$0-1]);
	
break;
case 138:

		this.$ = new ArrList($$[$0-1]);
	
break;
case 143:

				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 144:
this.$ = [$$[$0]];
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,9:5,10:6,11:$V0,12:$V1,16:8,17:9,18:10,19:11,20:12,21:13,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{1:[3]},{5:[1,24],6:25,9:5,10:6,11:$V0,12:$V1,16:8,17:9,18:10,19:11,20:12,21:13,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Va,[2,3]),{7:[1,26],8:[1,27]},o($Va,[2,6]),o($Va,[2,7]),{12:[1,28]},o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),{13:$Vb,22:29,23:$Vc,26:31,66:30,67:32,68:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{12:[1,42]},{12:[1,43]},{23:[1,44]},{23:[1,45]},{14:[1,46]},{23:[1,47]},{23:[1,48]},{12:[2,96]},{12:[2,97]},{1:[2,1]},o($Va,[2,2]),o($Va,[2,4]),o($Va,[2,5]),{13:[1,49]},{23:[1,50]},o($Vl,[2,73],{7:[1,51]}),{13:$Vb,23:$Vm,67:52,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($Vn,[2,77]),{12:$Vo,23:$Vp,43:53,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:[1,65]},{12:$Vo,14:$Vz,23:$Vp,29:66,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,14:$Vz,23:$Vp,29:69,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,14:$Vz,23:$Vp,29:70,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,14:$Vz,23:$Vp,29:71,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,14:$Vz,23:$Vp,29:72,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($Vn,[2,87]),o($Vn,[2,88]),{33:$VA,64:73},{23:[1,75]},{12:$Vo,23:$Vp,43:76,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:77,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:78,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{12:$Vo,23:$Vp,43:91,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:93,58:[1,92],68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{14:[1,94]},{12:$Vo,14:$Vz,23:$Vp,24:95,25:$VE,27:96,29:97,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($Vl,[2,72]),o($Vn,[2,76]),{69:[1,98],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{12:$Vo,23:$Vp,43:116,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:117,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:118,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($VW,[2,129]),o($VW,[2,130]),o($VW,[2,131]),o($VW,[2,132]),o($VW,[2,133]),o($VW,[2,136],{26:119,22:120,23:$Vc,68:$Vd,71:$Ve}),{12:[1,121]},{12:$Vo,14:$Vz,23:$Vp,29:124,43:67,68:$Vq,69:[2,142],90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:122,113:123},o($VX,$VY,{70:125,26:126,68:$Vd,71:$Ve}),o($Vn,[2,82]),o($VZ,[2,107],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV}),{8:[2,146],12:$V_,88:127,114:128,115:129},o($Vn,[2,83]),o($Vn,[2,84]),o($Vn,[2,85]),o($Vn,[2,86]),{7:[2,68],28:[1,132],62:131},{12:$V$,34:133,82:$V01,84:$V11,85:$V21,86:$V31},{12:[1,141],25:[2,26],31:139,36:140},{25:[1,142],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{25:[1,143],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{8:[1,144],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($V41,[2,30]),o($V41,[2,31]),o($V41,[2,32]),o($V41,[2,33]),o($V41,[2,34]),o($V41,[2,35]),o($V41,[2,36]),o($V41,[2,37]),o($V41,[2,38]),{7:[1,146]},{7:[1,147]},{7:[1,150],12:$Vo,14:$Vz,23:$Vp,29:149,41:148,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{25:[1,151],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{12:[1,152]},{7:[1,154],13:[1,153],59:155,60:$V51,61:$V61,76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{8:[2,90],12:$V71,15:158,78:159,80:160},{25:[1,162]},{25:[2,18],28:[1,163]},o($V81,[2,21]),o($VX,$VY,{26:126,70:164,68:$Vd,71:$Ve}),{12:$Vo,23:$Vp,43:165,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:166,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:167,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:168,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:169,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:170,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:171,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:172,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:173,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:174,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:175,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:176,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:177,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:178,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:179,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($VW,[2,127]),o($VW,[2,128]),o($VW,[2,113]),o($VW,[2,124]),{25:[1,180],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},o($VW,[2,134],{23:$Vm}),{23:[1,181]},{23:[1,182]},{69:[1,183]},{28:[1,184],69:[2,141]},o($V91,[2,144]),o($VX,[2,79]),o($VX,[2,80]),{8:[1,185]},{7:$Va1,8:[2,145],28:$Vb1,79:186},o($Vc1,[2,148]),{33:[1,189]},{7:[1,190]},{12:[1,192],63:191},o($Vd1,[2,75],{13:[1,193]}),o($Ve1,$Vf1,{83:194,87:195,68:$Vg1}),o($Ve1,$Vf1,{87:195,83:197,68:$Vg1}),o($Ve1,$Vf1,{87:195,83:198,68:$Vg1}),o($Ve1,$Vf1,{87:195,83:199,68:$Vg1}),o($Ve1,$Vf1,{87:195,83:200,68:$Vg1}),{25:[1,201]},{25:[2,25],28:[1,202]},{33:[1,203]},{14:[1,204]},{14:[1,205]},{47:[1,206]},o($V41,[2,29]),o($V41,[2,39]),o($V41,[2,40]),o($V41,[2,41]),{7:[1,207]},o($V41,[2,43]),{14:[1,208]},{33:[1,209],59:210,60:$V51,61:$V61},{12:$Vo,23:$Vp,43:211,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:212,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:213,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($Vh1,[2,65]),o($Vh1,[2,66]),{8:[1,214]},{7:$Va1,8:[2,89],28:$Vb1,79:215},o($Vc1,[2,92]),{33:[1,216]},{7:[1,217]},{12:$Vo,14:$Vz,23:$Vp,29:218,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($VX,[2,78]),o($Vi1,[2,109],{76:$VF,77:$VG,91:$VJ,92:$VK,93:$VL,94:$VM}),o($Vi1,[2,110],{76:$VF,77:$VG,91:$VJ,92:$VK,93:$VL,94:$VM}),o($Vj1,[2,111],{76:$VF,77:$VG,93:$VL}),o($Vj1,[2,112],{76:$VF,77:$VG,93:$VL}),o($VW,[2,114]),o($Vj1,[2,115],{76:$VF,77:$VG,93:$VL}),o($Vk1,[2,116],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM}),o($Vk1,[2,117],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM}),o($Vk1,[2,118],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM}),o($Vk1,[2,119],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM}),o($Vk1,[2,120],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM}),o($Vk1,[2,121],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM}),o([5,7,8,11,12,13,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,81,101,102,104],[2,122],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS}),o([5,7,8,11,12,13,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,81,102,104],[2,123],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),{33:[1,219],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},o($VW,[2,125]),{12:$Vo,14:$Vz,23:$Vp,24:220,25:$VE,27:96,29:97,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:221,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($VW,[2,138]),{12:$Vo,14:$Vz,23:$Vp,29:222,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($VZ,[2,108]),{12:$V_,115:223},{12:[2,93]},{12:[2,94]},{12:$Vo,14:$Vz,23:$Vp,29:224,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($Vl,[2,71]),{7:[2,67],28:[1,225]},{33:$VA,64:226},{12:$Vo,14:$Vz,23:$Vp,29:227,43:67,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},o($Ve1,[2,98]),o($Ve1,[2,103],{68:[1,228]}),{69:[1,229]},o($Ve1,[2,99]),o($Ve1,[2,100]),o($Ve1,[2,101]),o($Ve1,[2,102]),{14:[1,232],32:230,33:[1,231]},{12:[1,233]},{12:$V$,34:234,82:$V01,84:$V11,85:$V21,86:$V31},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:235,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:236,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{23:[1,237]},o($V41,[2,42]),{50:238,52:239,53:$Vl1,56:[2,53]},{12:$V$,34:241,82:$V01,84:$V11,85:$V21,86:$V31},{12:$Vo,23:$Vp,43:242,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{7:[1,243],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{7:[1,244],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{25:[1,245],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{7:[1,246]},{12:$V71,80:247},{12:$V$,34:248,82:$V01,84:$V11,85:$V21,86:$V31},o($Vl,[2,15]),o($V81,[2,20]),{12:$Vo,23:$Vp,43:249,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{25:[1,250]},{25:[1,251],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},o($V91,[2,143]),o($Vc1,[2,147]),o($Vc1,[2,149]),{12:[1,252]},o($Vd1,[2,70]),o($Vd1,[2,74]),{69:[1,253]},o($Vm1,[2,106]),o($Vl,[2,22]),{12:$V$,34:254,82:$V01,84:$V11,85:$V21,86:$V31},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:255,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{33:[1,256]},o($V81,[2,28]),{8:[1,257],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{8:[1,258],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{12:$Vo,23:$Vp,43:259,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{51:260,54:261,56:[1,262]},{53:$Vn1,56:[2,52]},{12:$Vo,23:$Vp,43:264,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{13:[1,265]},{25:[1,266],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{12:$Vo,23:$Vp,43:267,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{12:$Vo,23:$Vp,43:268,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{14:[1,269]},o($Va,[2,8]),o($Vc1,[2,91]),o($Vc1,[2,95]),o([5,7,8,11,12,13,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,60,61,69,81],[2,126],{76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV}),o($VW,[2,137]),o($VW,[2,135]),{33:$VA,64:270},o($Vm1,[2,105]),{14:[1,271]},{8:[1,272],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{12:$V$,34:273,82:$V01,84:$V11,85:$V21,86:$V31},o($Vl,$Vo1,{44:274,45:$Vp1}),o($Vl,[2,49]),{25:[1,276],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{8:[1,277]},{8:[2,59],52:279,53:$Vl1,55:278},{33:[1,280]},{12:$Vo,23:$Vp,43:281,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{33:[1,282],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{12:$Vo,23:$Vp,43:283,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{14:[1,284]},{7:[1,285],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{25:[1,286],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:287,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vd1,[2,69]),{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:288,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vl,[2,24]),o($V81,[2,27]),o($Vl,[2,44]),{14:[1,291],42:[1,290],46:289},{7:[1,292]},o($Vl,[2,51]),{8:[2,56]},{8:[2,58],53:$Vn1},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:293,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{33:[1,294],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:295,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{7:[1,296],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:297,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{12:$Vo,23:$Vp,43:298,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{14:[1,299]},{8:[1,300],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{8:[1,301],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vl,[2,45]),{23:[1,302]},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:303,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vl,[2,50]),o([8,53],[2,57],{65:15,9:80,10:81,16:82,17:83,18:84,19:85,20:86,21:87,37:145,12:$V1,30:$V2,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,81:$V9}),{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:304,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vq1,[2,55],{65:15,9:80,10:81,16:82,17:83,18:84,19:85,20:86,21:87,37:145,12:$V1,30:$V2,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,81:$V9}),{12:$Vo,23:$Vp,43:305,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{8:[1,306],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{25:[1,307],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:308,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vl,[2,64]),o($Vl,[2,23]),{12:$Vo,23:$Vp,43:309,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{8:[1,310],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vq1,[2,54],{65:15,9:80,10:81,16:82,17:83,18:84,19:85,20:86,21:87,37:145,12:$V1,30:$V2,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,81:$V9}),{7:[1,311],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},o($Vl,[2,63]),{14:[1,312]},{8:[1,313],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{25:[1,314],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},o($Vl,[2,48]),{12:$Vo,23:$Vp,43:315,68:$Vq,90:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:316,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vl,[2,62]),{14:[1,317]},{25:[1,318],76:$VF,77:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,104:$VV},{8:[1,319],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:320,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{14:[1,321]},o($Vl,[2,61]),{8:[1,322],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},{9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,35:323,37:79,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vl,$Vo1,{44:324,45:$Vp1}),{8:[1,325],9:80,10:81,12:$V1,16:82,17:83,18:84,19:85,20:86,21:87,30:$V2,37:145,38:$VB,39:$VC,40:$VD,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,65:15,81:$V9},o($Vl,[2,47]),o($Vl,[2,60])],
defaultActions: {22:[2,96],23:[2,97],24:[2,1],187:[2,93],188:[2,94],278:[2,56]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	let tablaErrores = [];	

	const Logical  = require('./CodigoIntermedio/Logical.js');
	const Operation = require('./CodigoIntermedio/Operation.js');
	const Relational = require('./CodigoIntermedio/Relational.js');
	const tsObject =  require('./CodigoIntermedio/tsObject.js')
	const Print =     require('./CodigoIntermedio/Print.js')
	const Variables = require('./CodigoIntermedio/Variable.js')
	const defLast = require('./CodigoIntermedio/defLast.js')
	const Id = require('./CodigoIntermedio/Id.js')
	const If = require('./CodigoIntermedio/If.js')
	const VariableChange = require('./CodigoIntermedio/VariableChange.js');
	const While = require('./CodigoIntermedio/While.js');
	const DoWhile = require('./CodigoIntermedio/DoWhile.js');
	const Switch = require('./CodigoIntermedio/Switch.js');
	const For = require('./CodigoIntermedio/For.js')
	const IncDecOp = require('./CodigoIntermedio/IncDecOp.js');
	const For2 = require('./CodigoIntermedio/For2.js');
	const ForThree = require('./CodigoIntermedio/ForThree.js');
	const Function = require('./CodigoIntermedio/Function.js');
	const callFunction = require('./CodigoIntermedio/callFunction.js');
	const Return = require('./CodigoIntermedio/Return.js');
	const Break = require('./CodigoIntermedio/Break.js');
	const Continue = require('./CodigoIntermedio/Continue.js');
	const Ternary = require('./CodigoIntermedio/Ternary.js');
	const Arrayl = require('./CodigoIntermedio/Arrayl.js');
	const ArrList = require('./CodigoIntermedio/ArrList.js');
	const IdAccess = require('./CodigoIntermedio/IdAccess.js');
	const List = require('./CodigoIntermedio/List.js');
	const ForIO = require('./CodigoIntermedio/ForIO.js');
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Comentario Linea
break;
case 1://Comentaio Multilinea
break;
case 2:return 39;
break;
case 3:return 38;
break;
case 4:return 109;
break;
case 5:return 11;
break;
case 6:return 81;
break;
case 7:return 58;
break;
case 8:return 81;
break;
case 9:return 30;
break;
case 10:return 42;
break;
case 11:return 45;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 53;
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 60;
break;
case 19:return 61;
break;
case 20:return 82;
break;
case 21:return 84;
break;
case 22:return 85;
break;
case 23:return 86;
break;
case 24:return 107;
break;
case 25:return 108;
break;
case 26:return 'undefined';
break;
case 27:return 40;
break;
case 28:return 110;
break;
case 29:return 72;
break;
case 30:return 73;
break;
case 31:return 74;
break;
case 32:return 75;
break;
case 33:return 14;
break;
case 34:return 8;
break;
case 35:return 23;
break;
case 36:return 25;
break;
case 37:return 28;
break;
case 38:return 7;
break;
case 39:return 33;
break;
case 40:return 71;
break;
case 41:return 76;
break;
case 42:return 77;
break;
case 43:return 89;
break;
case 44:return 90;
break;
case 45:return 93;
break;
case 46:return 91;
break;
case 47:return 92;
break;
case 48:return 94;
break;
case 49:return 97;
break;
case 50:return 98;
break;
case 51:return 95;
break;
case 52:return 96;
break;
case 53:return 99;
break;
case 54:return 13;
break;
case 55:return 100;
break;
case 56:return 101;
break;
case 57:return 102;
break;
case 58:return 103;
break;
case 59:return 104;
break;
case 60:return 68;
break;
case 61:return 69;
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:
break;
case 66:return 105;
break;
case 67:return 106;
break;
case 68:return 12;
break;
case 69:return 5;
break;
case 70: 
							console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
							tablaErrores.push({line:yy_.yylloc.first_line, column:yy_.yylloc.first_column, type:'Lexico',msg:'El caracter: ' + yy_.yytext + " no se esperaba"})
	
						
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:\s+)/,/^(?:\t+)/,/^(?:\r+)/,/^(?:\n+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*'|`[^\`]*`)/,/^(?:([a-zA-Z$_])[a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}